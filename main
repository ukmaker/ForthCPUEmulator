# 0 "/home/duncan/src/ForthCPUEmulator/main.cpp"
# 1 "/home/duncan/src/ForthCPUEmulator//"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "/home/duncan/src/ForthCPUEmulator/main.cpp"

# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 392 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 393 "/usr/include/features.h" 2 3 4
# 486 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 559 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 560 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 561 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 487 "/usr/include/features.h" 2 3 4
# 510 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 511 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4


# 29 "/usr/include/stdio.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4





typedef __gnuc_va_list va_list;
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;






typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4
# 143 "/usr/include/stdio.h" 3 4
extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) noexcept (true);

extern int rename (const char *__old, const char *__new) noexcept (true);



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) noexcept (true);
# 170 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) noexcept (true);






extern int fclose (FILE *__stream);
# 188 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 200 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void)
   __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;



extern char *tmpnam (char[20]) noexcept (true) ;




extern char *tmpnam_r (char __s[20]) noexcept (true) ;
# 222 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
   noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (__builtin_free, 1)));






extern int fflush (FILE *__stream);
# 239 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 249 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 258 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 283 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) noexcept (true)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) noexcept (true)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) noexcept (true)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 328 "/usr/include/stdio.h" 3 4
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) noexcept (true);



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) noexcept (true);




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) noexcept (true);


extern void setlinebuf (FILE *__stream) noexcept (true);







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) noexcept (true);





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) noexcept (true);



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     noexcept (true) __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) noexcept (true);





# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 74 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
# 86 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef __float128 _Float128;
# 119 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 431 "/usr/include/stdio.h" 2 3 4



extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) noexcept (true) __asm__ ("" "__isoc99_sscanf")

                      ;
# 459 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     noexcept (true) __attribute__ ((__format__ (__scanf__, 2, 0)));





extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) noexcept (true) __asm__ ("" "__isoc99_vsscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 513 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 538 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 549 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 565 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__access__ (__write_only__, 1, 2)));
# 615 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream)
    __attribute__ ((__access__ (__write_only__, 1, 2)));
# 632 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 691 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 702 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 736 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 760 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 779 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) noexcept (true);

extern int feof (FILE *__stream) noexcept (true) ;

extern int ferror (FILE *__stream) noexcept (true) ;



extern void clearerr_unlocked (FILE *__stream) noexcept (true);
extern int feof_unlocked (FILE *__stream) noexcept (true) ;
extern int ferror_unlocked (FILE *__stream) noexcept (true) ;







extern void perror (const char *__s);




extern int fileno (FILE *__stream) noexcept (true) ;




extern int fileno_unlocked (FILE *__stream) noexcept (true) ;
# 823 "/usr/include/stdio.h" 3 4
extern int pclose (FILE *__stream);





extern FILE *popen (const char *__command, const char *__modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (pclose, 1))) ;






extern char *ctermid (char *__s) noexcept (true)
  __attribute__ ((__access__ (__write_only__, 1)));





extern char *cuserid (char *__s)
  __attribute__ ((__access__ (__write_only__, 1)));




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) noexcept (true);



extern int ftrylockfile (FILE *__stream) noexcept (true) ;


extern void funlockfile (FILE *__stream) noexcept (true);
# 885 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 902 "/usr/include/stdio.h" 3 4
}
# 3 "/home/duncan/src/ForthCPUEmulator/main.cpp" 2
# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     noexcept (true) __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     noexcept (true) __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     noexcept (true) __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) noexcept (true);
extern int isalpha (int) noexcept (true);
extern int iscntrl (int) noexcept (true);
extern int isdigit (int) noexcept (true);
extern int islower (int) noexcept (true);
extern int isgraph (int) noexcept (true);
extern int isprint (int) noexcept (true);
extern int ispunct (int) noexcept (true);
extern int isspace (int) noexcept (true);
extern int isupper (int) noexcept (true);
extern int isxdigit (int) noexcept (true);



extern int tolower (int __c) noexcept (true);


extern int toupper (int __c) noexcept (true);




extern int isblank (int) noexcept (true);




extern int isctype (int __c, int __mask) noexcept (true);






extern int isascii (int __c) noexcept (true);



extern int toascii (int __c) noexcept (true);



extern int _toupper (int) noexcept (true);
extern int _tolower (int) noexcept (true);
# 237 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 238 "/usr/include/ctype.h" 2 3 4
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) noexcept (true);
extern int isalpha_l (int, locale_t) noexcept (true);
extern int iscntrl_l (int, locale_t) noexcept (true);
extern int isdigit_l (int, locale_t) noexcept (true);
extern int islower_l (int, locale_t) noexcept (true);
extern int isgraph_l (int, locale_t) noexcept (true);
extern int isprint_l (int, locale_t) noexcept (true);
extern int ispunct_l (int, locale_t) noexcept (true);
extern int isspace_l (int, locale_t) noexcept (true);
extern int isupper_l (int, locale_t) noexcept (true);
extern int isxdigit_l (int, locale_t) noexcept (true);

extern int isblank_l (int, locale_t) noexcept (true);



extern int __tolower_l (int __c, locale_t __l) noexcept (true);
extern int tolower_l (int __c, locale_t __l) noexcept (true);


extern int __toupper_l (int __c, locale_t __l) noexcept (true);
extern int toupper_l (int __c, locale_t __l) noexcept (true);
# 327 "/usr/include/ctype.h" 3 4
}
# 4 "/home/duncan/src/ForthCPUEmulator/main.cpp" 2
# 1 "/usr/include/c++/11/stdlib.h" 1 3
# 36 "/usr/include/c++/11/stdlib.h" 3
# 1 "/usr/include/c++/11/cstdlib" 1 3
# 39 "/usr/include/c++/11/cstdlib" 3
       
# 40 "/usr/include/c++/11/cstdlib" 3

# 1 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 1 3
# 278 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 300 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 586 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/11/bits/os_defines.h" 1 3
# 587 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/11/bits/cpu_defines.h" 1 3
# 590 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 2 3
# 777 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 3
# 1 "/usr/include/c++/11/pstl/pstl_config.h" 1 3
# 778 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 2 3
# 42 "/usr/include/c++/11/cstdlib" 2 3
# 75 "/usr/include/c++/11/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 26 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 33 "/usr/include/stdlib.h" 2 3 4

extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 59 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 98 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) noexcept (true) ;



extern double atof (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) noexcept (true) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 233 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 275 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 317 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 386 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) noexcept (true) ;


extern long int a64l (const char *__s)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 97 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 102 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 153 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 3 4
typedef union
{
  __extension__ unsigned long long int __value64;
  struct
  {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 90 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 396 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) noexcept (true);


extern void srandom (unsigned int __seed) noexcept (true);





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) noexcept (true) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     noexcept (true) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) noexcept (true);

extern void srand (unsigned int __seed) noexcept (true);



extern int rand_r (unsigned int *__seed) noexcept (true);







extern double drand48 (void) noexcept (true);
extern double erand48 (unsigned short int __xsubi[3]) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) noexcept (true);
extern long int nrand48 (unsigned short int __xsubi[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) noexcept (true);
extern long int jrand48 (unsigned short int __xsubi[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) noexcept (true);
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) noexcept (true) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     noexcept (true) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     noexcept (true) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));


extern void free (void *__ptr) noexcept (true);







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)))
    __attribute__ ((__malloc__ (__builtin_free, 1)));


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__malloc__ (reallocarray, 1)));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) noexcept (true);





}
# 575 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
     __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) noexcept (true) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) noexcept (true) __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     noexcept (true) __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 617 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) noexcept (true) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) noexcept (true) __attribute__ ((__noreturn__));





extern void _Exit (int __status) noexcept (true) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     noexcept (true) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) noexcept (true);
# 682 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) noexcept (true) __attribute__ ((__nonnull__ (1)));
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 705 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 727 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 738 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 749 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 759 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 769 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 781 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 791 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__malloc__))
     __attribute__ ((__malloc__ (__builtin_free, 1))) ;
# 808 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) noexcept (true) ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) noexcept (true) __attribute__ ((__const__)) ;
extern long int labs (long int __x) noexcept (true) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     noexcept (true) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     noexcept (true) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     noexcept (true) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     noexcept (true) __attribute__ ((__const__)) ;
# 880 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) noexcept (true);


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) noexcept (true);


extern int wctomb (char *__s, wchar_t __wchar) noexcept (true);



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) noexcept (true)
    __attribute__ ((__access__ (__read_only__, 2)));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     noexcept (true)
  __attribute__ ((__access__ (__write_only__, 1, 3)))
  __attribute__ ((__access__ (__read_only__, 2)));






extern int rpmatch (const char *__response) noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 967 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) noexcept (true);



extern int unlockpt (int __fd) noexcept (true);




extern char *ptsname (int __fd) noexcept (true) ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 2, 3)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 1023 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1024 "/usr/include/stdlib.h" 2 3 4
# 1035 "/usr/include/stdlib.h" 3 4
}
# 76 "/usr/include/c++/11/cstdlib" 2 3

# 1 "/usr/include/c++/11/bits/std_abs.h" 1 3
# 33 "/usr/include/c++/11/bits/std_abs.h" 3
       
# 34 "/usr/include/c++/11/bits/std_abs.h" 3
# 46 "/usr/include/c++/11/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 70 "/usr/include/c++/11/bits/std_abs.h" 3
  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 101 "/usr/include/c++/11/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 78 "/usr/include/c++/11/cstdlib" 2 3
# 121 "/usr/include/c++/11/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;

  using ::aligned_alloc;

  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "/usr/include/c++/11/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/usr/include/c++/11/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "/usr/include/c++/11/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 5 "/home/duncan/src/ForthCPUEmulator/main.cpp" 2
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 226 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4
# 267 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int execveat (int __fd, const char *__path, char *const __argv[],
                     char *const __envp[], int __flags)
    noexcept (true) __attribute__ ((__nonnull__ (2, 3)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     noexcept (true) __attribute__ ((__nonnull__ (2))) ;
# 339 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) noexcept (true);
# 350 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     noexcept (true);






extern int close (int __fd);




extern void closefrom (int __lowfd) noexcept (true);







extern ssize_t read (int __fd, void *__buf, size_t __nbytes)
    __attribute__ ((__access__ (__write_only__, 2, 3)));





extern ssize_t write (int __fd, const void *__buf, size_t __n)
    __attribute__ ((__access__ (__read_only__, 2, 3)));
# 389 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset)
    __attribute__ ((__access__ (__write_only__, 2, 3)));






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset)
    __attribute__ ((__access__ (__read_only__, 2, 3)));
# 422 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset)
    __attribute__ ((__access__ (__write_only__, 2, 3)));


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset)
    __attribute__ ((__access__ (__read_only__, 2, 3)));







extern int pipe (int __pipedes[2]) noexcept (true) ;




extern int pipe2 (int __pipedes[2], int __flags) noexcept (true) ;
# 452 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) noexcept (true);
# 464 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     noexcept (true);






extern int usleep (__useconds_t __useconds);
# 489 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) noexcept (true) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     noexcept (true) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) noexcept (true) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) noexcept (true) ;
# 531 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) noexcept (true) ;





extern char *get_current_dir_name (void) noexcept (true);







extern char *getwd (char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__))
    __attribute__ ((__access__ (__write_only__, 1)));




extern int dup (int __fd) noexcept (true) ;


extern int dup2 (int __fd, int __fd2) noexcept (true);




extern int dup3 (int __fd, int __fd2, int __flags) noexcept (true);



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     noexcept (true) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) noexcept (true) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT,


    _SC_MINSIGSTKSZ,


    _SC_SIGSTKSZ

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 631 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) noexcept (true);


extern long int sysconf (int __name) noexcept (true);



extern size_t confstr (int __name, char *__buf, size_t __len) noexcept (true)
    __attribute__ ((__access__ (__write_only__, 2, 3)));




extern __pid_t getpid (void) noexcept (true);


extern __pid_t getppid (void) noexcept (true);


extern __pid_t getpgrp (void) noexcept (true);


extern __pid_t __getpgid (__pid_t __pid) noexcept (true);

extern __pid_t getpgid (__pid_t __pid) noexcept (true);






extern int setpgid (__pid_t __pid, __pid_t __pgid) noexcept (true);
# 682 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) noexcept (true);






extern __pid_t setsid (void) noexcept (true);



extern __pid_t getsid (__pid_t __pid) noexcept (true);



extern __uid_t getuid (void) noexcept (true);


extern __uid_t geteuid (void) noexcept (true);


extern __gid_t getgid (void) noexcept (true);


extern __gid_t getegid (void) noexcept (true);




extern int getgroups (int __size, __gid_t __list[]) noexcept (true)
    __attribute__ ((__access__ (__write_only__, 2, 1)));


extern int group_member (__gid_t __gid) noexcept (true);






extern int setuid (__uid_t __uid) noexcept (true) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) noexcept (true) ;




extern int seteuid (__uid_t __uid) noexcept (true) ;






extern int setgid (__gid_t __gid) noexcept (true) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) noexcept (true) ;




extern int setegid (__gid_t __gid) noexcept (true) ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     noexcept (true);



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     noexcept (true);



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     noexcept (true) ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     noexcept (true) ;






extern __pid_t fork (void) noexcept (true);







extern __pid_t vfork (void) noexcept (true);






extern __pid_t _Fork (void) noexcept (true);





extern char *ttyname (int __fd) noexcept (true);



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2)))
     __attribute__ ((__access__ (__write_only__, 2, 3)));



extern int isatty (int __fd) noexcept (true);




extern int ttyslot (void) noexcept (true);




extern int link (const char *__from, const char *__to)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     noexcept (true) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)))
     __attribute__ ((__access__ (__write_only__, 2, 3)));





extern int symlinkat (const char *__from, int __tofd,
        const char *__to) noexcept (true) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (2, 3)))
     __attribute__ ((__access__ (__write_only__, 3, 4)));



extern int unlink (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     noexcept (true) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) noexcept (true) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) noexcept (true);


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) noexcept (true);






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));




extern int setlogin (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern "C" {







extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       noexcept (true) __attribute__ ((__nonnull__ (2, 3)));

}
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4

extern "C" {
# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
}
# 904 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) noexcept (true) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));






extern int sethostname (const char *__name, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__read_only__, 1, 2)));



extern int sethostid (long int __id) noexcept (true) ;





extern int getdomainname (char *__name, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (1)))
     __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int setdomainname (const char *__name, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__read_only__, 1, 2)));




extern int vhangup (void) noexcept (true);


extern int revoke (const char *__file) noexcept (true) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) noexcept (true);



extern char *getusershell (void) noexcept (true);
extern void endusershell (void) noexcept (true);
extern void setusershell (void) noexcept (true);





extern int daemon (int __nochdir, int __noclose) noexcept (true) ;






extern int chroot (const char *__path) noexcept (true) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) noexcept (true);






extern long int gethostid (void);


extern void sync (void) noexcept (true);





extern int getpagesize (void) noexcept (true) __attribute__ ((__const__));




extern int getdtablesize (void) noexcept (true);
# 1026 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 1038 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     noexcept (true) __attribute__ ((__nonnull__ (1))) ;
# 1049 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) noexcept (true) ;
# 1059 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) noexcept (true) ;
# 1070 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) noexcept (true) ;





extern void *sbrk (intptr_t __delta) noexcept (true);
# 1091 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) noexcept (true);
# 1114 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1124 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1142 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);
# 1159 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));







extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) noexcept (true) __attribute__ ((__nonnull__ (1, 2)))
    __attribute__ ((__access__ (__read_only__, 1, 3)))
    __attribute__ ((__access__ (__write_only__, 2, 3)));
# 1198 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length)
    __attribute__ ((__access__ (__write_only__, 1, 2)));
# 1208 "/usr/include/unistd.h" 3 4
extern int close_range (unsigned int __fd, unsigned int __max_fd,
   int __flags) noexcept (true);
# 1218 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 3 4
extern __pid_t gettid (void) noexcept (true);



# 1 "/usr/include/linux/close_range.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 2 3 4
# 1219 "/usr/include/unistd.h" 2 3 4

}
# 6 "/home/duncan/src/ForthCPUEmulator/main.cpp" 2
# 1 "/home/duncan/src/ForthCPUEmulator/runtime/ForthCPU/ForthVM.h" 1



# 1 "/home/duncan/src/ForthCPUEmulator/runtime/ForthCPU/Memory.h" 1


# 1 "/home/duncan/src/ForthCPUEmulator/runtime/ForthCPU/FArduino.h" 1





# 1 "/usr/include/c++/11/stdlib.h" 1 3
# 7 "/home/duncan/src/ForthCPUEmulator/runtime/ForthCPU/FArduino.h" 2

# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h" 2 3 4
# 9 "/home/duncan/src/ForthCPUEmulator/runtime/ForthCPU/FArduino.h" 2
# 4 "/home/duncan/src/ForthCPUEmulator/runtime/ForthCPU/Memory.h" 2






# 9 "/home/duncan/src/ForthCPUEmulator/runtime/ForthCPU/Memory.h"
class Memory {

    public:

    Memory(uint8_t *ram, size_t ramSize, uint16_t ramStart,
        const uint8_t *rom, size_t romSize, uint16_t romStart) :
        _ram(ram), _ramSize(ramSize), _ramStart(ramStart),
        _rom(rom), _romSize(romSize), _romStart(romStart)
         {
            _ramEnd = _ramStart + _ramSize;
            _romEnd = _romStart + _romSize;
         }

    ~Memory() {}

    virtual void put(uint16_t addr, uint16_t w)=0;

    virtual uint16_t get(uint16_t addr)=0;

    virtual void putC(uint16_t addr, uint8_t c)=0;

    virtual uint8_t getC(uint16_t addr)=0;

    virtual uint8_t *addressOfChar(uint16_t location)=0;

    virtual uint16_t *addressOfWord(uint16_t location)=0;

    protected:

    uint8_t *_ram;
    uint16_t _ramSize;
    uint16_t _ramStart;
    uint16_t _ramEnd;

    const uint8_t *_rom;
    uint16_t _romSize;
    uint16_t _romStart;
    uint16_t _romEnd;

};
# 5 "/home/duncan/src/ForthCPUEmulator/runtime/ForthCPU/ForthVM.h" 2

# 1 "/home/duncan/src/ForthCPUEmulator/runtime/ForthCPU/ForthIS.h" 1
# 7 "/home/duncan/src/ForthCPUEmulator/runtime/ForthCPU/ForthVM.h" 2

class ForthVM;

class ForthVM
{

public:
    ForthVM(Memory *ram)
    :
    _ram(ram)
    {
        _halted = true;
    }

    ~ForthVM() {}

    bool halted() {
        return _halted;
    }

    void reset() {
        _pc = 0;
        _here = 0;
        _intr0 = 0;
        _intr1 = 0;
        _halted = false;
        _interruptsEnabled = false;
    }

    void warm() {
        _pc = 0;
        _halted = false;
    }

    void step() {
        _clock();
    }

    void run() {
        while(!halted()) step();
    }

    uint16_t get(uint8_t reg) {
        return _regs[reg];
    }

    void set(uint8_t reg, uint16_t v) {
        _regs[reg] = v;
    }

    void setPC(uint16_t a) {
        _pc = a;
    }

    uint16_t getPC() {
        return _pc;
    }

    bool getC() {
        return _c;
    }

    bool getZ() {
        return _z;
    }

    bool getO() {
        return _odd;
    }

    bool getS() {
        return _sign;
    }

    void push(uint16_t c) {
        _ram->put(_regs[13], (uint16_t)c);
        _regs[13]-=2;
    }

    uint16_t pop() {
        _regs[13]+=2;
        return _ram->get(_regs[13]);
    }

    void pushr(uint16_t c) {
        _ram->put(_regs[14], (uint16_t)c);
        _regs[14]-=2;
    }

    uint16_t popr() {
        _regs[14]+=2;
        return _ram->get(_regs[14]);
    }

    uint8_t readByte(uint16_t addr) {
        return _ram->getC(addr);
    }

    uint16_t read(uint16_t addr) {
        return _ram->get(addr);
    }

    Memory *ram() {
        return _ram;
    }

    void halt() {
        _halted = true;
    }

    protected:

    bool _halted;
    bool _interruptsEnabled = false;

    Memory *_ram;


    uint16_t _regs[16];
    uint16_t _pc;
    uint16_t _here;
    uint16_t _intr0;
    uint16_t _intr1;


    bool _z;
    bool _c;
    bool _sign;
    bool _odd;

    uint8_t _arga(uint16_t instr) {
        return (instr & (0x0f << 4)) >> 4;
    }

    uint8_t _argb(uint16_t instr) {
        return (instr & (0x0f << 0)) >> 0;
    }

    uint8_t _u4(uint16_t instr) {
        return _argb(instr);
    }

    int8_t _s4(uint16_t instr) {
        return _sex(_argb(instr));
    }

    uint8_t _u5(uint16_t instr) {
        return _argb(instr) + (((instr & 0x2000) >> 13) << 4);
    }

    int8_t _u8(uint16_t instr) {
        return (instr & 0xff);
    }

    int8_t _s8(uint16_t instr) {
        return _sex(instr & 0xff);
    }

    void _lds(uint16_t instr) {
        uint8_t op = (instr & 0x1800) >> 11;
        uint8_t mode = (instr & 0x0700) >> 8;

        uint8_t rega;
        uint8_t regb;
        uint16_t arga;
        uint16_t argb;

        bool byteMode = (op == 1 || op == 3);
        uint8_t delta = byteMode ? 1 : 2;

        uint8_t U5 = _u5(instr);

        switch(mode)
        {
            case 0:
                rega = _arga(instr);
                regb = _argb(instr);
                arga = _regs[rega];
                argb = _regs[regb];
            break;

            case 1:
                rega = _arga(instr);
                regb = _argb(instr);
                arga = _regs[rega];
                argb = _here;
            break;

            case 2:
                rega = _arga(instr);
                regb = _argb(instr);
                arga = _regs[rega];
                argb = _regs[regb];
                _regs[regb] = _regs[regb] + delta;
            break;

            case 3:
                rega = _arga(instr);
                regb = _argb(instr);
                _regs[regb] = _regs[regb] - delta;
                arga = _regs[rega];
                argb = _regs[regb];
            break;

            case 4:
                rega = _arga(instr);
                regb = _argb(instr);
                arga = _regs[rega];
                argb = _regs[15] + U5;
             break;

            case 5:
                rega = _arga(instr);
                regb = _argb(instr);
                arga = _regs[rega];
                argb = _regs[11] - U5;
            break;

            case 6:
                rega = _arga(instr);
                regb = _argb(instr);
                arga = _regs[rega];
                argb = _regs[13] + U5;
            break;

            case 7:
                rega = _arga(instr);
                regb = _argb(instr);
                arga = _regs[rega];
                argb = _regs[14] + U5;
            break;

        }
        switch(op)
        {
            case 0:
                _regs[rega] = _ram->get(argb);
            break;

            case 1:
                _ram->putC(argb, arga);
            break;

            case 2:
                _ram->put(argb, arga);
            break;

            case 3:
                _regs[rega] = _ram->getC(argb);
            break;
        }
    }

    void _alu(uint16_t instr) {
        uint8_t op = (instr & 0x3c00) >> 10;
        uint8_t mode = (instr & 0x0300) >> 8;

        uint8_t rega;
        uint8_t regb;
        uint16_t arga;
        uint16_t argb;

        switch(mode)
        {
            case 0:
                rega = _arga(instr);
                regb = _argb(instr);
                arga = _regs[rega];
                argb = _regs[regb];
            break;

            case 1:
                rega = _arga(instr);
                arga = _regs[rega];
                argb = _u4(instr);
            break;

            case 2:
                rega = 8;
                arga = _regs[rega];
                argb = _u8(instr);
           break;

            case 3:
                rega = 8;
                arga = _regs[rega];
                argb = _s8(instr);
            break;

        }

        switch(op)
        {
            case 0:
                _regs[arga] = argb;
            break;

            case 1:
                _add(rega, argb);
            break;

            case 2:
                _sub(rega, argb);
            break;

            case 3:
                _mul(rega, argb);
            break;

            case 4:
                _or(rega, argb);
            break;

            case 5:
                _and(rega, argb);
            break;

            case 6:
                _xor(rega, argb);
            break;

            case 7:
                _sl(rega, argb);
            break;

            case 8:
                _sr(rega, argb);
            break;

            case 9:
                _sra(rega, argb);
            break;

            case 10:
                _rot(rega, argb);
            break;

            case 11:
                _bit(rega, argb);
            break;

            case 12:
                _set(rega, argb);
            break;

            case 13:
                _clr(rega, argb);
            break;

            case 14:
                _cmp(rega, argb);
            break;

            case 15:
                _sex(rega, argb);
            break;
        }

    }

    void _jmp(uint16_t instr) {

        bool ccapply = false;
        bool ccinvert = false;
        bool skip = false;
        bool link = false;

        uint8_t cc = (instr & 0x0c00) >> 10;
        uint8_t op = (instr & 0x0300) >> 8;
        uint8_t mode = (instr & 0x0300) >> 8;
        link = (instr & 0x0080) != 0;

        switch((instr & 0x3000) >> 12)
        {
            case 2:
                ccapply = true;
                break;
            case 3:
                ccapply = true;
                ccinvert = true;
                break;
            default: break;
        }

        if(ccapply) {

            switch (cc)
            {
                case 1:
                    skip = !_c;
                    break;
                case 0:
                    skip = !_z;
                    break;
                case 2:
                    skip = !_sign;
                    break;
                case 3:
                    skip = !_odd;
                    break;
                default:
                    break;
            }

            if(ccinvert) skip = !skip;
        }

        if(skip) {
            switch(mode)
            {
                case 0:
                    _pc = _regs[_argb(instr)];
                    if(link) _regs[15] = _here;
                    break;
                case 1:
                    _pc = _ram->get(_regs[_argb(instr)]);
                    if(link) _regs[15] = _here;
                    break;
                case 2:
                    _pc = _ram->get(_pc);
                    if(link) _regs[15] = _here + 2;
                    break;
                case 3:
                    _pc += _ram->get(_pc);
                    if(link) _regs[15] = _here + 2;
                    break;
            }
        } else {
            if(mode == 2 || mode == 3) {
                _pc +=2;
            }
        }
    }
    void _gen(uint16_t instr) {
        uint8_t op = (instr & 0x1c00) >> 10;
        switch(op)
        {
            case 0: break;
            case 1: _halted = true; break;
            case 2: _interruptsEnabled = true; break;
            case 3: _interruptsEnabled = false; break;
            default: break;
        }
    }


    void _clock()
    {
        if(_halted) {
            return;
        }

        uint16_t instr = _ram->get(_pc);
        _pc += 2;
        _here = _pc;


        uint8_t group = (instr & 0xc000) >> 14;
        switch(group)
        {
            case 0:
                _gen(instr);
                break;
            case 1:
                _lds(instr);
                break;
            case 3:
                _alu(instr);
                break;
            case 2:
                _jmp(instr);
                break;
        }
    }

    void _add(uint8_t rega, uint16_t argb) {
        uint32_t r = (uint32_t)_regs[rega] + (uint32_t)argb;
        _regs[rega] = r & 0xffff;
        _arithmeticFlags(r);
    }

    void _sub(uint8_t rega, uint16_t argb) {
        uint32_t r = (uint32_t)_regs[rega] - (uint32_t)argb;
        _regs[rega] = r & 0xffff;
        _arithmeticFlags(r);
    }

    void _cmp(uint8_t rega, uint16_t argb) {
        uint32_t r = (uint32_t)_regs[rega] - (uint32_t)argb;
        _cmpFlags((uint32_t)_regs[rega], (uint32_t)argb, r);
    }

   void _mul(uint8_t rega, uint16_t argb) {
        uint32_t r = (uint32_t)_regs[rega] * (uint32_t)argb;
        _regs[rega] = r & 0xffff;
        _arithmeticFlags(r);
    }

    void _and(uint8_t rega, uint16_t argb) {
        uint16_t r = _regs[rega] & argb;
        _regs[rega] = r;
        _booleanFlags(r);
    }

    void _or(uint8_t rega, uint16_t argb) {
        uint16_t r = _regs[rega] | argb;
        _regs[rega] = r;
        _booleanFlags(r);
    }

    void _not(uint8_t rega, uint16_t argb) {
        uint16_t r = ~argb;
        _regs[rega] = r;
        _booleanFlags(r);
    }

    void _xor(uint8_t rega, uint16_t argb) {
        uint16_t r = _regs[rega] ^ argb;
        _regs[rega] = r;
        _booleanFlags(r);
    }

    void _sl(uint8_t rega, uint16_t argb) {
        uint32_t r = _regs[rega] << argb;
        _regs[rega] = r & 0xffff;
        _booleanFlags(r);
    }

    void _sr(uint8_t rega, uint16_t argb) {
        uint16_t r = _regs[rega] >> argb;
        bool c = _regs[rega] & 1;
        _regs[rega] = r;
        _booleanFlags(r);
        _c = c;
    }

    void _sra(uint8_t rega, uint16_t argb) {
        uint16_t r = _regs[rega] >> argb;
        bool c = _regs[rega] & 1;
        _regs[rega] = r;
        _sex(rega, 15 - argb);
        _booleanFlags(r);
        _c = c;
    }

    void _rot(uint8_t rega, uint16_t argb) {
        uint16_t mask = ~((0xffff >> argb) << argb);
        uint16_t bits = _regs[rega] & mask;
        _regs[rega] = (_regs[rega] >> argb) | (bits << (16-argb));
        _booleanFlags(_regs[rega]);
        _c = (_regs[rega] & 0x8000) != 0;
    }

    void _booleanFlags(uint32_t v) {
        _c = (v & (uint32_t)0x10000) == (uint32_t)0x10000;
        _z = v == 0;
        _odd = v & 0x01;
        _sign = (v & (uint32_t)0x08000) != 0;
    }

    void _arithmeticFlags(uint32_t v) {
        _c = (v & (uint32_t)0x10000) == (uint32_t)0x10000;
        _z = v == 0;

        _odd = (v & (uint32_t)0xffff0000) != 0;
        _sign = (v & (uint32_t)0x08000) != 0;
    }

    void _cmpFlags(uint32_t a,uint32_t b, uint32_t v) {







        _c = (v & (uint32_t)0x10000) == (uint32_t)0x10000;
        _z = v == 0;

        bool SD = (a ^ b) != 0;
        bool SR = (v & 0x8000) != 0;
        _odd = (SR && (SD || !_z));
        _sign = (v & (uint32_t)0x08000) != 0;
    }





    int8_t _sex(uint8_t n, uint8_t b) {

        if(n & (1 << b)) {
            uint8_t bits = (0xff >> b) << b;
            return n | bits;
        }

        return n;
    }

    uint16_t _sex(uint8_t n) {
        uint16_t r = n;
        if(n & 0x80) {
            r |= 0xff00;
        }
        return r;
    }

    void _bit(uint8_t rega, uint16_t argb) {
        _z = (_regs[rega] & (1 << argb)) == 0;
    }

    void _set(uint8_t rega, uint16_t argb) {
        _regs[rega] = _regs[rega] | (1 << argb);
    }

    void _clr(uint8_t rega, uint16_t argb) {
        _regs[rega] = _regs[rega] & ~(1 << argb);
    }
};
# 7 "/home/duncan/src/ForthCPUEmulator/main.cpp" 2
# 1 "/home/duncan/src/ForthCPUEmulator/runtime/ForthCPU/UnsafeMemory.h" 1





class UnsafeMemory : public Memory {

public:

    UnsafeMemory(uint8_t *ram, size_t ramSize, uint16_t ramStart,
        const uint8_t *rom, size_t romSize, uint16_t romStart) :
        Memory(ram, ramSize, ramStart, rom, romSize, romStart) {}

    ~UnsafeMemory() {}

    void put(uint16_t addr, uint16_t w) {
        if(addr >= _ramStart && addr <= _ramEnd) {
            *(uint16_t *)(_ram + addr - _ramStart) = w;
        } else {
            *(uint16_t *)(_rom + addr - _romStart) = w;
        }
    }

    uint16_t get(uint16_t addr) {

        if(addr >= _ramStart && addr <= _ramEnd) {
            return *(uint16_t *)(_ram + addr - _ramStart);
        } else {



            return *(uint16_t *)(_rom + addr - _romStart);

        }
    }

    void putC(uint16_t addr, uint8_t c) {
         if(addr >= _ramStart && addr <= (_ramEnd+1)) {
            *(_ram + addr - _ramStart) = c;
         } else {
            *(uint8_t *)(_rom + addr - _romStart) = c;
         }
    }

    uint8_t getC(uint16_t addr) {

        if(addr >= _ramStart && addr <= (_ramEnd+1)) {
            return *(_ram + addr - _ramStart);
        } else {



            return *(_rom + addr - _romStart);

        }
    }

    uint8_t *addressOfChar(uint16_t addr) {
         if(addr >= _ramStart && addr <= (_ramEnd+1)) {
            return _ram + addr - _ramStart;
         } else {
            return (uint8_t *)(_rom + addr - _ramStart);
         }
     }

     uint16_t *addressOfWord(uint16_t addr) {
        if(addr >= _ramStart && addr <= _ramEnd) {
            return (uint16_t *)(_ram + addr - _ramStart);
        } else {
            return (uint16_t *)(_rom + addr - _romStart);
         }
     }
};
# 8 "/home/duncan/src/ForthCPUEmulator/main.cpp" 2
# 1 "/home/duncan/src/ForthCPUEmulator/runtime/ForthCPU/FSerial.h" 1






class FSerial {

    public:

    int getc() {
        return getchar();
    }

    int putc(char c) {
        return putchar(c);
    }

    void printf(const char *format, int value) {
        ::printf(format, value);
    }

    void println(const char *str) {
        ::printf("%s\n", str);
    }

    void flush() {

    }

    void print(char c) {
        putchar(c);
    }

    void print(const char* s) {
        ::printf(s, 0);
    }

    int read() {
        return getchar();
    }

    bool available() {
        return true;
    }

    int readBytesUntil(char separator, char *buf, size_t len) {
        size_t num_read = 0;
        while (num_read < len) {
            int c = getc();
            if (c < 0 || c == separator) break;
            *buf++ = (char)c;
            num_read++;
        }
        return num_read;
    }
};

FSerial Serial;
# 9 "/home/duncan/src/ForthCPUEmulator/main.cpp" 2
# 1 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 1


# 1 "/home/duncan/src/ForthCPUEmulator/tools/../runtime/ForthCPU/ForthIS.h" 1
# 4 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 2
# 1 "/home/duncan/src/ForthCPUEmulator/tools/AssemblyVocabulary.h" 1



# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4


# 28 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
    noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 4)));




extern void *memset (void *__s, int __c, size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 80 "/usr/include/string.h" 3 4
extern int __memcmpeq (const void *__s1, const void *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      noexcept (true) __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      noexcept (true) __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 105 "/usr/include/string.h" 3 4
}
# 115 "/usr/include/string.h" 3 4
extern "C++" void *rawmemchr (void *__s, int __c)
     noexcept (true) __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     noexcept (true) __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      noexcept (true) __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)))
      __attribute__ ((__access__ (__read_only__, 1, 3)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      noexcept (true) __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)))
      __attribute__ ((__access__ (__read_only__, 1, 3)));
# 141 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
    noexcept (true) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 1, 3)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) noexcept (true) __attribute__ ((__nonnull__ (2, 4)))
     __attribute__ ((__access__ (__write_only__, 1, 3)));





extern char *strdup (const char *__s)
     noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 224 "/usr/include/string.h" 3 4
extern "C++"
{
extern char *strchr (char *__s, int __c)
     noexcept (true) __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     noexcept (true) __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 244 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     noexcept (true) __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     noexcept (true) __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 271 "/usr/include/string.h" 3 4
}
# 281 "/usr/include/string.h" 3 4
extern "C++" char *strchrnul (char *__s, int __c)
     noexcept (true) __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     noexcept (true) __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 293 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     noexcept (true) __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     noexcept (true) __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 321 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     noexcept (true) __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     noexcept (true) __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 348 "/usr/include/string.h" 3 4
}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     noexcept (true) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     noexcept (true) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     noexcept (true) __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     noexcept (true) __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     noexcept (true) __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 389 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)))
    __attribute__ ((__access__ (__read_only__, 1, 2)))
    __attribute__ ((__access__ (__read_only__, 3, 4)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) noexcept (true);
# 444 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 2, 3)));




extern const char *strerrordesc_np (int __err) noexcept (true);

extern const char *strerrorname_np (int __err) noexcept (true);





extern char *strerror_l (int __errnum, locale_t __l) noexcept (true);



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4






extern "C" {



extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1)));



extern "C++"
{
extern char *index (char *__s, int __c)
     noexcept (true) __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     noexcept (true) __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 66 "/usr/include/strings.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     noexcept (true) __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     noexcept (true) __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 94 "/usr/include/strings.h" 3 4
}
# 104 "/usr/include/strings.h" 3 4
extern int ffs (int __i) noexcept (true) __attribute__ ((__const__));





extern int ffsl (long int __l) noexcept (true) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     noexcept (true) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));


}
# 463 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) noexcept (true);



extern const char *sigabbrev_np (int __sig) noexcept (true);


extern const char *sigdescr_np (int __sig) noexcept (true);



extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__read_write__, 1, 2)));







extern "C++" char *basename (char *__filename)
     noexcept (true) __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     noexcept (true) __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 539 "/usr/include/string.h" 3 4
}
# 5 "/home/duncan/src/ForthCPUEmulator/tools/AssemblyVocabulary.h" 2


# 1 "/home/duncan/src/ForthCPUEmulator/tools/Token.h" 1






# 1 "/home/duncan/src/ForthCPUEmulator/tools/Opcodes.h" 1
# 9 "/home/duncan/src/ForthCPUEmulator/tools/Opcodes.h"

# 9 "/home/duncan/src/ForthCPUEmulator/tools/Opcodes.h"
class Opcode {

    public:

    Opcode(const char *name, uint16_t code) :
        _name(name), _code(code), _isLdx(false), _isJmp(false), _isImmediate(false) {}

    Opcode(const char *name, uint16_t code, bool isLdx) :
        _name(name), _code(code), _isLdx(isLdx), _isJmp(false), _isImmediate(false) {}

    Opcode(const char *name, uint16_t code, bool isLdx, bool isJmp) :
        _name(name), _code(code), _isLdx(isLdx), _isJmp(isJmp), _isImmediate(false) {}

    Opcode(const char *name, uint16_t code, bool isLdx, bool isJmp, bool isImmediate) :
        _name(name), _code(code), _isLdx(isLdx), _isJmp(isJmp), _isImmediate(isImmediate) {}

    static Opcode *aluCode(const char *name, uint16_t op, uint16_t mode) {
        uint16_t opcode =
            (3 << 14)
        + (op << 10)
        + (mode << 8);

        return new Opcode(name, opcode);
    }

    static Opcode *genCode(const char *name, uint16_t op) {
        uint16_t opcode =
            (0 << 14)
        + (op << 10);

        return new Opcode(name, opcode);
    }

    static Opcode *ldsCode(const char *name, uint16_t op, uint16_t mode, bool imm = false) {
        uint16_t opcode =
            (1 << 14)
        + (op << 11)
        + (mode << 8);

        return new Opcode(name, opcode, false, false, imm);
    }

    static Opcode *ldxCode(const char *name, uint16_t op) {
        uint16_t opcode =
            (1 << 14)
        + (op << 11);

        return new Opcode(name, opcode, true);
    }

    static Opcode *jmpCode(const char *name, uint16_t mode, uint16_t link, bool imm = false) {
        uint16_t opcode =
            (2 << 14)
        + (mode << 8)
        + (link << 7);

        return new Opcode(name, opcode, false, true, imm);
    }

    uint16_t getCode() {
        return _code;
    }

    uint8_t getGroup() {
        return (_code & 0xc000) >> 14;
    }

    const char *getName() {
        return _name;
    }

    bool isNamed(char *source, int pos, int len) {
        int equal = false;

        if((int)strlen(_name) == len) {
            int equal = true;
            for(int j=0; j<len; j++) {
                if(source[pos + j] != _name[j]) {
                    equal = false;
                }
            }
        }

        return equal;
    }

    bool isGen() {
        return getGroup() == 0;
    }

    bool isALU() {
        return getGroup() == 3;
    }

    bool isLDS() {
        return getGroup() == 1;
    }

    bool isJMP() {
        return getGroup() == 2;
    }

    bool isLdx() {
        return _isLdx;
    }

    void setLdxModeAndOffset(uint16_t mode, uint16_t u5) {
        _code |= (mode << 8);
        _code |= (u5 & 0x000f);
        _code |= (u5 & 0x0010) << (13 - 4);
    }

    bool isJmp() {
        return _isJmp;
    }

    void setJmpSkipAndCC(uint16_t skip, uint16_t cc) {
        _code |= (skip << 12);
        _code |= (cc << 10);
    }

    bool isImmediate() {
        return _isImmediate;
    }

    uint8_t getALUMode() {
        return (_code & 0x0300) >> 8;
    }

    uint8_t getLDSMode() {
        return (_code & 0x0700) >> 8;
    }

    uint8_t getJMPMode() {
        return (_code & 0x0300) >> 8;
    }

    uint8_t getALUOp() {
        return (_code & 0x3c00) >> 10;
    }

    uint8_t getLDSOp() {
        return (_code & 0x1800) >> 11;
    }

    uint8_t getJMPOp() {
        return (_code & 0x0380) >> 7;
    }

    bool expectsRa() {
        return
            (isALU() && getALUMode() == 0)
        | (isALU() && getALUMode() == 1)
        | isLDS();
    }

    bool expectsRb() {
        return
            (isALU() && getALUMode() == 0)
        | (isLDS() && getLDSMode() == 2)
        | (isLDS() && getLDSMode() == 3)
        | (isLDS() && getLDSMode() == 4)
        | (isLDS() && getLDSMode() == 5)
        | (isLDS() && getLDSMode() == 6)
        | (isLDS() && getLDSMode() == 7)
        | (isJMP() && getJMPMode() == 0)
        | (isJMP() && getJMPMode() == 1);
    }

    bool expectsU16() {
        return
            (isLDS() && getLDSMode() == 1)
        | (isJMP() && getJMPMode() == 2)
        | (isJMP() && getJMPMode() == 3);
    }


    bool expectsU4() {
        return
            (isALU() && getALUMode() == 1);
    }

    bool expectsU5() {
        return
            (isLDS() && getJMPMode() == 4)
        | (isLDS() && getJMPMode() == 5)
        | (isLDS() && getJMPMode() == 6)
        | (isLDS() && getJMPMode() == 7);
    }

   bool expectsU8() {
        return
            (isALU() && getALUMode() == 2);
    }

   bool expectsS8() {
        return
           (isALU() && getALUMode() == 3);
    }

    void setArgA(uint8_t a) {
        _code &= 0xff0f;
        _code |= ((a & 0x0f) << 4);
    }

    void setArgB(uint8_t b) {
        _code &= 0xfff0;
        _code |= (b & 0x0f);
    }

    void setU5(uint8_t u) {
        _code &= ~(1 << 13);
        _code |= ((u & 0x10) << (13 - 4));
        setArgB(u);
    }


    protected:

    const char *_name;
    uint16_t _code;
    bool _isLdx;
    bool _isJmp;
    bool _isImmediate;

};

class Opcodes {
    public:

        Opcodes() {
            _aluCodes("MOV", "MOVI", "MOVAI", "MOVAS", 0);
            _aluCodes("ADD", "ADDI", "ADDAI", "ADDAS", 1);
            _aluCodes("SUB", "SUBI", "SUBAI", "SUBAS", 2);
            _aluCodes("MUL", "MULI", "MULAI", "MULAS", 3);
            _aluCodes("OR", "ORI", "ORAI", "ORAS", 4);
            _aluCodes("AND", "ANDI", "ANDAI", "ANDAS", 5);
            _aluCodes("XOR", "XORI", "XORAI", "XORAS", 6);
            _aluCodes("SL", "SLI", "SLAI", "SLAS", 7);
            _aluCodes("SR", "SRI", "SRAI", "SRAS", 8);
            _aluCodes("SRA", "SRAI", "SRAAI", "SRAAS", 9);
            _aluCodes("ROT", "ROTI", "ROTAI", "ROTAS", 10);
            _aluCodes("BIT", "BITI", "BITAI", "BITAS", 11);
            _aluCodes("SET", "SETI", "SETAI", "SETAS", 12);
            _aluCodes("CLR", "CLRI", "CLRAI", "CLRAS", 13);
            _aluCodes("CMP", "CMPI", "CMPAI", "CMPAS", 14);
            _aluCodes("SEX", "SEXI", "SEXAI", "SEXAS", 15);

            _genCode("NOP", 0);
            _genCode("HALT", 1);
            _genCode("DI", 3);
            _genCode("EI", 2);
            _genCode("RETI", 4);

            _ldsCodes("LD", "LDI", "POP", "POPR", 0);
            _ldsCodes("LD_B", "LDI_B", "POP_B", "POPR_B", 1);
            _ldsCodes("ST", "STI", "PUSH", "PUSHR", 2);
            _ldsCodes("ST_B", "STI_B", "PUSH_B", "PUSHR_B", 3);

            _ldxCodes();

            _jmpCodes();


        }

        Opcode *find(char *source, int pos, int len) {
            for(uint16_t i=0; i< idx; i++) {
                if(opcodes[i]->isNamed(source, pos, len)) {
                    return opcodes[i];
                }
            }

            return 
# 282 "/home/duncan/src/ForthCPUEmulator/tools/Opcodes.h" 3 4
                  __null
# 282 "/home/duncan/src/ForthCPUEmulator/tools/Opcodes.h"
                      ;
        }

    protected:

    void _aluCodes(const char *a, const char *b, const char *c, const char *d, uint16_t op) {
        opcodes[idx++] = Opcode::aluCode(a, op, 0);
        opcodes[idx++] = Opcode::aluCode(b, op, 1);
        opcodes[idx++] = Opcode::aluCode(c, op, 2);
        opcodes[idx++] = Opcode::aluCode(d, op, 3);
    }

    void _genCode(const char *name, uint16_t op) {
        opcodes[idx++] = Opcode::genCode(name, op);
    }

    void _ldsCodes(const char *a, const char *b, const char *c, const char *d, uint16_t op) {
        opcodes[idx++] = Opcode::ldsCode(a, op, 0);
        opcodes[idx++] = Opcode::ldsCode(b, op, 1, true);
        opcodes[idx++] = Opcode::ldsCode(c, op, 2);
        opcodes[idx++] = Opcode::ldsCode(d, op, 3);
    }

    void _ldxCodes() {
        opcodes[idx++] = Opcode::ldxCode("LDX", 0);
        opcodes[idx++] = Opcode::ldxCode("LDX_B", 1);
        opcodes[idx++] = Opcode::ldxCode("STX", 2);
        opcodes[idx++] = Opcode::ldxCode("STX_B", 3);
    }

    void _jmpCodes() {
        opcodes[idx++] = Opcode::jmpCode("JP", 0, 0);
        opcodes[idx++] = Opcode::jmpCode("JPM", 1, 0);
        opcodes[idx++] = Opcode::jmpCode("JI", 2, 0, true);
        opcodes[idx++] = Opcode::jmpCode("JR", 3, 0);

        opcodes[idx++] = Opcode::jmpCode("JPL", 0, 1);
        opcodes[idx++] = Opcode::jmpCode("JPML", 1, 1);
        opcodes[idx++] = Opcode::jmpCode("JIL", 2, 1, true);
        opcodes[idx++] = Opcode::jmpCode("JRL", 3, 1);
    }


    Opcode *opcodes[256];
    uint8_t idx = 0;
};
# 8 "/home/duncan/src/ForthCPUEmulator/tools/Token.h" 2
# 49 "/home/duncan/src/ForthCPUEmulator/tools/Token.h"
class Token {
    public:


    Token(const char *name, int line, int pos) {
        this->name = name;
        this->line = line;
        this->pos = pos;
    }

    ~Token() {}

    static Token *eof() {
        Token *t = new Token(
# 62 "/home/duncan/src/ForthCPUEmulator/tools/Token.h" 3 4
                            __null
# 62 "/home/duncan/src/ForthCPUEmulator/tools/Token.h"
                                ,0,0);
        t->type = 7;
        return t;
    }

    static Token *error(int line, int pos, const char *message) {
        Token *t = new Token(
# 68 "/home/duncan/src/ForthCPUEmulator/tools/Token.h" 3 4
                            __null
# 68 "/home/duncan/src/ForthCPUEmulator/tools/Token.h"
                                ,line,pos);
        t->type = 6;
        t->str = message;
        return t;
    }

    const char *name = 
# 74 "/home/duncan/src/ForthCPUEmulator/tools/Token.h" 3 4
                      __null
# 74 "/home/duncan/src/ForthCPUEmulator/tools/Token.h"
                          ;
    int line = 0;
    int pos = 0;

    uint8_t type = 0;

    uint16_t address = 0;







    int value = 0;

    const char *str = 
# 90 "/home/duncan/src/ForthCPUEmulator/tools/Token.h" 3 4
                     __null
# 90 "/home/duncan/src/ForthCPUEmulator/tools/Token.h"
                         ;
    const char *strB = 
# 91 "/home/duncan/src/ForthCPUEmulator/tools/Token.h" 3 4
                      __null
# 91 "/home/duncan/src/ForthCPUEmulator/tools/Token.h"
                          ;


    Opcode *opcode;
    uint8_t directive = 0;
    uint8_t arga = 0;
    uint8_t argb = 0;
    uint8_t condition = 0;
    uint8_t apply = 0;
    uint8_t invert = 0;
    uint8_t U5 = 0;





    bool symbolic = false;

    Token *next = 
# 109 "/home/duncan/src/ForthCPUEmulator/tools/Token.h" 3 4
                 __null
# 109 "/home/duncan/src/ForthCPUEmulator/tools/Token.h"
                     ;
    Token *label = 
# 110 "/home/duncan/src/ForthCPUEmulator/tools/Token.h" 3 4
                  __null
# 110 "/home/duncan/src/ForthCPUEmulator/tools/Token.h"
                      ;

    bool isConditional() {
        return (condition & 8) != 0;
    }

    bool isConditionNegated() {
         return (condition & 4) != 0;
    }

    uint8_t getCondition() {
        return condition & 0x03;
    }

    bool isNamed(char *n) {
        return strcasecmp(name, n) == 0;
    }

    bool isCode() {
        return type == 0;
    }

    bool isLabel() {
        return type == 1;
    }

    bool isConst() {
        return type == 2;
    }

    bool isVar() {
        return type == 3;
    }

    bool isStr() {
        return type == 4;
    }

    bool isComment() {
        return type == 5;
    }

    bool isDirective() {
        return type == 8;
    }

    bool isOrg() {
        return isDirective() && (directive == 0);
    }

    bool isData() {
        return isDirective() && (directive == 1);
    }

    bool isStringData() {
        return isDirective() && (
            (directive == 3)
            || (directive == 4)
            || (directive == 5)
            || (directive == 6)
            || (directive == 7)
            || (directive == 8)
        );
    }

    bool isHeader() {
            return (directive == 4)
            || (directive == 5)
            || (directive == 6)
            || (directive == 7)
            || (directive == 8);
    }

    bool isPStringData() {
        return isDirective() && (directive == 3);
    }

    bool isNStringData() {
        return isDirective() && (directive == 4);
    }

    bool isRStringData() {
        return isDirective() && (directive == 5);
    }

    bool isIStringData() {
        return isDirective() && (directive == 6);
    }

    bool isXStringData() {
        return isDirective() && (directive == 7);
    }

    bool isCStringData() {
        return isDirective() && (directive == 8);
    }

    bool isAlias() {
        return isDirective() && (directive == 2);
    }

    bool isLocation() {

        return !(isLabel() || isComment());
    }

    bool isError() {
        return type == 6;
    }

    bool isSymbolic() {
        return symbolic;
    }

    int strlen() {
        if(isStringData()) {
            return ::strlen(str);
        }
        return -1;
    }

    uint16_t opWord() {
        return opcode->getCode();
    }

    uint8_t lowByte() {
        return opWord() & 0xff;
    }

    uint8_t highByte() {
        return (opWord() & 0xff00) >> 8;
    }
};
# 8 "/home/duncan/src/ForthCPUEmulator/tools/AssemblyVocabulary.h" 2


class AssemblyVocabulary {

    public:
    AssemblyVocabulary() {

        opcodes = new Opcodes();


        for(int i=0; i<65; i++) {
            for(int j=0; j<16; j++) {
                aliases[j][i] = '\0';
            }
        }

        argnames[0] = "R0";
        argnames[1] = "R1";
        argnames[2] = "R2";
        argnames[3] = "R3";
        argnames[4] = "R4";
        argnames[5] = "R5";
        argnames[6] = "R6";
        argnames[7] = "R7";
        argnames[8] = "A";
        argnames[9] = "B";
        argnames[15] = "RL";
        argnames[12] = "WA";
        argnames[13] = "SP";
        argnames[14] = "RS";
        argnames[11] = "FP";
        argnames[10] = "I";

        ccnames[1] = "C";
        ccnames[0] = "Z";
        ccnames[3] = "P";
        ccnames[2] = "M";

        directives[0] = "ORG";
        directives[1] = "DATA";
        directives[2] = "ALIAS";
        directives[3] = "SDATA";
        directives[4] = "N";
        directives[5] = "R";
        directives[6] = "I";
        directives[7] = "X";
        directives[8] = "C";

    }

    void setAlias(uint8_t argname, const char *alias) {
        strcpy(aliases[argname],alias);
    }

    const char *argname(uint8_t arg) {
        if(arg > 15) return 
# 63 "/home/duncan/src/ForthCPUEmulator/tools/AssemblyVocabulary.h" 3 4
                           __null
# 63 "/home/duncan/src/ForthCPUEmulator/tools/AssemblyVocabulary.h"
                               ;
        return argnames[arg];
    }

    const char *ccname(uint8_t cc) {
        if(cc > 3) return 
# 68 "/home/duncan/src/ForthCPUEmulator/tools/AssemblyVocabulary.h" 3 4
                         __null
# 68 "/home/duncan/src/ForthCPUEmulator/tools/AssemblyVocabulary.h"
                             ;
        return ccnames[cc];
    }

    const char *directive(uint8_t dir) {
        if(dir > 8) return 
# 73 "/home/duncan/src/ForthCPUEmulator/tools/AssemblyVocabulary.h" 3 4
                          __null
# 73 "/home/duncan/src/ForthCPUEmulator/tools/AssemblyVocabulary.h"
                              ;
        return directives[dir];
    }

    Opcode *findOpcode(char *source, int pos, int len) {
        return opcodes->find(source, pos, len);
    }

    int findAlias(char *source, int pos, int len) {
        for(int i=0; i<16; i++) {
            if((int)strlen(aliases[i]) == len) {
                int equal = true;
                for(int j=0; j<len; j++) {
                    if(source[pos + j] != aliases[i][j]) {
                        equal = false;
                    }
                }
                if(equal) return i;
            }
        }
        return -1;
    }

    int findArg(char *source, int pos, int len) {
        for(int i=0; i<16; i++) {
            if((int)strlen(argnames[i]) == len) {
                int equal = true;
                for(int j=0; j<len; j++) {
                    if(source[pos + j] != argnames[i][j]) {
                        equal = false;
                    }
                }
                if(equal) return i;
            }
        }
        return findAlias(source, pos, len);
    }

    int findDirective(char *source, int pos, int len) {
        for(int i=0; i<9; i++) {
            if((int)strlen(directives[i]) == len) {
                int equal = true;
                for(int j=0; j<len; j++) {
                    if(source[pos + j] != directives[i][j]) {
                        equal = false;
                    }
                }
                if(equal) return i;
            }
        }
        return -1;
    }

    protected:

        Opcodes *opcodes;
        const char *argnames[16];
        const char *ccnames[4];
        const char *directives[9];
        char aliases[16][65];
};
# 5 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 2

# 1 "/home/duncan/src/ForthCPUEmulator/tools/Symbol.h" 1





class Symbol {

    public:

    const char *name;
    Symbol *next;
    Token *token = 
# 12 "/home/duncan/src/ForthCPUEmulator/tools/Symbol.h" 3 4
                  __null
# 12 "/home/duncan/src/ForthCPUEmulator/tools/Symbol.h"
                      ;

    bool resolved() {
        return token != 
# 15 "/home/duncan/src/ForthCPUEmulator/tools/Symbol.h" 3 4
                       __null
# 15 "/home/duncan/src/ForthCPUEmulator/tools/Symbol.h"
                           ;
    }
};
# 7 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 2
# 1 "/home/duncan/src/ForthCPUEmulator/tools/Option.h" 1





class Option
{

    public:

    Option(const char *n, uint16_t v) : name(n), value(v) {}
    ~Option() {}

    const char *name = 
# 14 "/home/duncan/src/ForthCPUEmulator/tools/Option.h" 3 4
                      __null
# 14 "/home/duncan/src/ForthCPUEmulator/tools/Option.h"
                          ;
    uint16_t value = 0;
    Option *next = 
# 16 "/home/duncan/src/ForthCPUEmulator/tools/Option.h" 3 4
                  __null
# 16 "/home/duncan/src/ForthCPUEmulator/tools/Option.h"
                      ;

};
# 8 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 2



# 1 "/usr/include/malloc.h" 1 3 4
# 24 "/usr/include/malloc.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 143 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4

# 143 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 415 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 426 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 25 "/usr/include/malloc.h" 2 3 4
# 36 "/usr/include/malloc.h" 3 4
extern "C" {


extern void *malloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;


extern void *calloc (size_t __nmemb, size_t __size)
noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
noexcept (true) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));






extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
  noexcept (true) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2, 3)))
  __attribute__ ((__malloc__ (__builtin_free, 1)));


extern void free (void *__ptr) noexcept (true);


extern void *memalign (size_t __alignment, size_t __size)
  noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
  __attribute__ ((__alloc_size__ (2))) __attribute__ ((__malloc__ (__builtin_free, 1)));


extern void *valloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) __attribute__ ((__malloc__ (__builtin_free, 1)));



extern void *pvalloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
  __attribute__ ((__malloc__ (__builtin_free, 1)));



struct mallinfo
{
  int arena;
  int ordblks;
  int smblks;
  int hblks;
  int hblkhd;
  int usmblks;
  int fsmblks;
  int uordblks;
  int fordblks;
  int keepcost;
};




struct mallinfo2
{
  size_t arena;
  size_t ordblks;
  size_t smblks;
  size_t hblks;
  size_t hblkhd;
  size_t usmblks;
  size_t fsmblks;
  size_t uordblks;
  size_t fordblks;
  size_t keepcost;
};


extern struct mallinfo mallinfo (void) noexcept (true) __attribute__ ((__deprecated__));


extern struct mallinfo2 mallinfo2 (void) noexcept (true);
# 144 "/usr/include/malloc.h" 3 4
extern int mallopt (int __param, int __val) noexcept (true);



extern int malloc_trim (size_t __pad) noexcept (true);



extern size_t malloc_usable_size (void *__ptr) noexcept (true);


extern void malloc_stats (void) noexcept (true);


extern int malloc_info (int __options, FILE *__fp) noexcept (true);

}
# 12 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 2
# 1 "/home/duncan/src/ForthCPUEmulator/tools/../runtime/ForthCPU/Memory.h" 1
# 13 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 2


# 14 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
class Assembler
{

public:

    static inline const char *NAME_EXPECTED = "Name expected";
    static inline const char *ALIAS_EXPECTED = "Alias expected";
    static inline const char *REGISTER_NAME_EXPECTED = "Register name expected";
    static inline const char *DIRECTIVE_EXPECTED = "Directive expected";
    static inline const char *NUMBER_EXPECTED = "Number expected";
    static inline const char *OPCODE_EXPECTED = "Opcode expected";
    static inline const char *INVALID_CONDITION = "Invalid condition";
    static inline const char *COMMA_EXPECTED = "Comma expected";
    static inline const char *TINY_RANGE_EXCEEDED = "Tiny immediate range (-8 to 7) exceeded";
    static inline const char *TINY_UNSIGNED_RANGE_EXCEEDED = "Tiny unsigned immediate range (0 to 15) exceeded";
    static inline const char *IMMEDIATE_RANGE_EXCEEDED = "Immediate range (-128 to 127) exceeded";
    static inline const char *UNSIGNED_IMMEDIATE_RANGE_EXCEEDED = "Unsigned immediate range (0 to 255) exceeded";
    static inline const char *NUMBER_OR_LABEL_EXPECTED = "Number or label expected";
    static inline const char *CONSTANT_EXPECTED = "Constant expected";
    static inline const char *STRING_EXPECTED = "String expected";
    static inline const char *HEX_NUMBER_EXPECTED = "Hex number expected";
    static inline const char *BINARY_NUMBER_EXPECTED = "Binary number expected";
    static inline const char *DECIMAL_NUMBER_EXPECTED = "Decimal number expected";

    Assembler()
    {

    }
    ~Assembler() {}

    bool hasErrors() {
        return phase1Error | phase2Error | phase3Error;
    }

    Token *firstLabel()
    {
        currentLabel = tokens;
        return nextLabel();
    }

    Token *nextLabel()
    {
        Token *found;
        while (currentLabel != 
# 57 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                              __null
# 57 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                  )
        {
            found = currentLabel;
            currentLabel = currentLabel->next;
            if (found->type == 1)
            {

                return found;
            }
        }
        return 
# 67 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
              __null
# 67 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                  ;
    }

    void clearOptions() {
        Option *opt = options;
        options = 
# 72 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                 __null
# 72 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                     ;
        while(opt != 
# 73 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                    __null
# 73 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                        ) {
            Option *next = opt->next;
            delete opt;
            opt = next;
        }
    }

    void setOption(const char *name, uint16_t value) {
        if(getOption(name) != 
# 81 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                             __null
# 81 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                 ) {
            printf("Error: option %s already defined\n", name);
        } else {
            Option *opt = new Option(name,value);
            if(options == 
# 85 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                         __null
# 85 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                             ) {
                options = opt;
            } else {
                Option *n = options;
                while(n->next != 
# 89 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                                __null
# 89 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                    ) n = n->next;
                n->next = opt;
            }
        }
    }

    Option *getOption(const char *name) {
        if(options == 
# 96 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                     __null
# 96 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                         ) return 
# 96 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                                  __null
# 96 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                      ;
        Option *opt = options;
        while(opt != 
# 98 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                    __null
# 98 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                        ) {
            if(strcmp(opt->name, name) == 0) return opt;
            opt = opt->next;
        }

        return 
# 103 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
              __null
# 103 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                  ;
    }

    int getLabelAddress(const char *name)
    {
        Token *tok = tokens;
        while (tok != 
# 109 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                     __null
# 109 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                         )
        {
            if (tok->isLabel() && tok->name != 
# 111 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                                              __null 
# 111 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                                   && (strcmp(tok->name, name) == 0))
            {
                return tok->address;
            }
            tok = tok->next;
        }
        return -1;
    }

    Token *getOpcode(uint16_t addr)
    {
        Token *tok = tokens;
        while (tok != 
# 123 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                     __null
# 123 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                         )
        {
            if (tok->type == 0 && tok->address == addr)
            {
                return tok;
            }
            tok = tok->next;
        }
        return 
# 131 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
              __null
# 131 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                  ;
    }

    Token *getLabel(uint16_t addr) {
        Token *tok = tokens;
        while (tok != 
# 136 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                     __null
# 136 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                         )
        {
            if (tok->type == 1 && tok->address == addr)
            {
                return tok;
            }
            tok = tok->next;
        }
        return 
# 144 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
              __null
# 144 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                  ;
    }

    bool slurp(const char *fileName)
    {
        phase1Error = false;
        phase2Error = false;
        phase3Error = false;

        FILE *file = fopen(fileName, "r");
        size_t n = 0;
        int c;

        if (file == 
# 157 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                   __null
# 157 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                       )
        {
            return false;
        }

        fseek(file, 0, 
# 162 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                      2
# 162 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                              );
        sourceLen = ftell(file);
        fseek(file, 0, 
# 164 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                      0
# 164 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                              );
        source = (char *)malloc(sourceLen + 1);

        while ((c = fgetc(file)) != 
# 167 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                                   (-1)
# 167 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                      )
        {
            source[n++] = (char)c;
        }

        source[n] = '\0';




        line = 1;
        pos = 1;
        lastPos = 1;
        idx = 0;

        return true;
    }

    long fileSize()
    {
        return sourceLen;
    }




    void pass1()
    {
        symbols = 
# 195 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                 __null
# 195 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                     ;
        idx = 0;
        line = 1;
        pos = 1;

        tokens = getToken();
        Token *tok = tokens;
        Symbol *sym = symbols;

        while (tok->type != 7)
        {

            switch (tok->type)
            {
            case 6:
                phase1Error = true;
                printf("ERROR: %s at line %d col %d\n", tok->str, tok->line, tok->pos);
                break;

            case 2:
            case 1:
            case 4:
            case 3:
                sym = getSymbol(tok->name);
                if (sym->token != 
# 219 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                                 __null
# 219 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                     )
                {
                    printf("ERROR: symbol \"%s\" redefined at line %d (first defined at line %d)",
                           tok->name,
                           tok->line,
                           sym->token->line);
                    phase1Error = true;
                }
                else
                {
                    sym->token = tok;
                }
                break;
            case 8:
                if(tok->isAlias()) {
                    vocab.setAlias(tok->arga, tok->str);
                }
                break;

            default:
                break;
            }
            tok->next = getToken();
            tok = tok->next;
        }
    }




    void pass2()
    {
        uint16_t addr = 0;
        Token *tok = tokens;
        Token *label = firstLabel();
        Symbol *sym;
        while (tok != 
# 255 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                     __null
# 255 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                         )
        {
            switch (tok->type)
            {
            case 5:
                break;
            case 2:
                break;
            case 8:
                if (tok->isOrg())
                {
                    if (tok->symbolic)
                    {

                        sym = getSymbol(tok->str);
                        if (sym == 
# 270 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                                  __null
# 270 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                      )
                        {
                            printf("ERROR: undefined symbol %s at line %d\n",
                                   tok->str, tok->line);
                            phase2Error = true;
                        }
                        else
                        {
                            tok->value = sym->token->value;
                        }
                    }
                    addr = tok->value;
                }
                else if (tok->isData())
                {
                    tok->address = addr;
                    if (label != 
# 286 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                                __null 
# 286 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                     && tok->address == label->address)
                    {
                        tok->label = label;
                        label = nextLabel();
                    }
                    addr += 2;
                }
                else if (tok->isPStringData())
                {

                    tok->address = addr;
                    if (label != 
# 297 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                                __null 
# 297 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                     && tok->address == label->address)
                    {
                        tok->label = label;
                        label = nextLabel();
                    }
                    addr += tok->value;
                    if (addr & 1)
                        addr++;
                }
                else if (tok->isHeader())
                {

                    tok->address = addr;
                    if (label != 
# 310 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                                __null 
# 310 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                     && tok->address == label->address)
                    {
                        tok->label = label;
                        label = nextLabel();
                    }
                    addr += tok->value + 2;
                    if (addr & 1)
                        addr++;
                }
                break;

            case 3:
                if (tok->symbolic)
                {

                    sym = getSymbol(tok->str);
                    if (sym == 
# 326 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                              __null
# 326 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                  )
                    {
                        printf("ERROR: undefined symbol %s at line %d\n",
                               tok->str, tok->line);
                        phase2Error = true;
                    }
                    else
                    {
                        tok->value = sym->token->value;
                    }
                }
                tok->address = addr;
                addr += tok->value;
                break;

            case 0:
            {
                tok->address = addr;
                if (label != 
# 344 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                            __null 
# 344 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                 && tok->address == label->address)
                {
                    tok->label = label;
                    label = 
# 347 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                           __null
# 347 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                               ;
                }
                addr += 2;
                if(tok->opcode->isImmediate()) {
                    addr += 2;
                }
            }

            break;

            case 4:
                tok->address = addr;
                addr += tok->value + 2;
                if (addr & 1)
                    addr++;
                break;

            case 1:
                tok->address = addr;
                label = tok;
                break;

            case 7:
                break;
            case 6:
                printf("ERROR: %s at line %d col %d\n", tok->str, tok->line, tok->pos);
                phase2Error = true;
                break;
            default:
                break;
            }

            tok = tok->next;
        }
    }




    void pass3()
    {

        Token *tok = tokens;
        while (tok != 
# 390 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                     __null
# 390 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                         )
        {
            switch (tok->type)
            {
            case 8:
            case 0:
            case 3:
                if (tok->symbolic)
                {
                    if(!dereferenceSymbol(tok)) {
                        phase3Error = true;
                    }
                }
                break;

            case 6:
                printf("ERROR: %s at line %d col %d\n", tok->str, tok->line, tok->pos);
                phase3Error = true;
                break;

            case 4:
            case 5:
            case 2:
            case 1:
            case 7:
            default:
                break;
            }
            tok = tok->next;
        }
    }

    void dump()
    {
        Token *tok = tokens;
        Symbol *sym = symbols;

        printf("==============================\n");
        printf("Unresolved Symbols\n");
        printf("==============================\n");
        while (sym != 
# 430 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                     __null
# 430 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                         )
        {
            if (!sym->resolved())
                printf("%s\n", sym->name);
            sym = sym->next;
        }
        sym = symbols;
        printf("==============================\n");
        printf("Constants \n");
        printf("==============================\n");
        while (sym != 
# 440 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                     __null
# 440 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                         )
        {
            if (sym->resolved() && sym->token->type == 2)
            {
                printf("%s = %d\n", sym->name, sym->token->value);
            }
            sym = sym->next;
        }
        sym = symbols;
        printf("==============================\n");
        printf("Variables \n");
        printf("==============================\n");
        while (sym != 
# 452 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                     __null
# 452 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                         )
        {
            if (sym->resolved() && sym->token->type == 3)
            {
                printf("%s = %d\n", sym->name, sym->token->value);
            }
            sym = sym->next;
        }
        sym = symbols;
        printf("==============================\n");
        printf("Strings \n");
        printf("==============================\n");
        while (sym != 
# 464 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                     __null
# 464 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                         )
        {
            if (sym->resolved() && sym->token->type == 4)
            {
                printf("%s Length %d - %s\n", sym->name, sym->token->value, sym->token->str);
            }
            sym = sym->next;
        }
        tok = firstLabel();
        printf("==============================\n");
        printf("Unresolved Labels \n");
        printf("==============================\n");
        while (tok != 
# 476 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                     __null
# 476 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                         )
        {
            if (tok->address == -1)
            {
                printf("%s: Line %d\n", tok->name, tok->line);
            }
            tok = nextLabel();
        }
    }

    uint16_t headerWord(Token *tok) {
        int r = (1 << 15);
        if(tok->isHeader()) {
            switch(tok->directive) {
                case 4:
                    r |= tok->strlen() | (0 << 12);
                    break;

                case 5:
                    r |= tok->strlen() | (2 << 12);
                    break;

                case 6:
                    r |= tok->strlen() | (1 << 12);
                    break;

                case 7:
                    r |= tok->strlen() | (3 << 12);
                    break;

                case 8:
                    r |= tok->strlen() | (4 << 12);
                    break;


                default: break;
            }
        }

        return r;
    }

    void writeCode()
    {
        Token *tok = tokens;
        uint8_t written;
        const char *c;
        uint16_t headerLen;

        while (tok != 
# 525 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                     __null
# 525 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                         )
        {
            switch (tok->type)
            {

            case 8:
                switch (tok->directive)
                {
                case 1:
                    printf("%04x %02x %02x\n", tok->address, (tok->value & 0xff00) >> 8, tok->value & 0xff);
                    break;

                case 3:
                {
                    c = tok->str;
                    written = 0;
                    while (*c != '\0')
                    {
                        if (written % 8 == 0)
                        {
                            printf("\n%04x ", tok->address + written);
                        }
                        printf("%02x ", *c);
                        written++;
                        c++;
                    }
                    printf("\n");
                }
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                {
                    headerLen = headerWord(tok);
                    c = tok->str;
                    printf("\n%04x %02x %02x ", tok->address, headerLen & 0xff, headerLen >> 8);
                    written = 2;
                    while (*c != '\0')
                    {
                        if (written % 8 == 0)
                        {
                            printf("\n%04x ", tok->address + written);
                        }
                        printf("%02x ", *c);
                        written++;
                        c++;
                    }
                    printf("\n");
                }
                break;
                default:
                    break;
                }
                break;

            case 3:
                printf("%04x %02x %02x\n", tok->address, (tok->value & 0xff00) >> 8, tok->value & 0xff);
                break;

            case 4:
            {
                c = tok->str;
                written = 0;
                while (*c != '\0')
                {
                    if (written % 8 == 0)
                    {
                        printf("\n%04x ", tok->address + written);
                    }
                    printf("%02x ", *c);
                    written++;
                    c++;
                }
                printf("\n");
            }
            break;

            case 0:
            {
                printf("%04x %02x %02x\n", tok->address, tok->highByte(), tok->lowByte());
                if(tok->opcode->isImmediate()) {
                    printf("%04x %02x %02x\n", tok->address + 2, tok->value & 0xff, (tok->value & 0xff00) >> 8);
                }
            }
            break;

            default:
                break;
            }

            tok = tok->next;
        }
    }

    void writeMemory(Memory *ram)
    {
        Token *tok = tokens;
        const char *c;
        int written;
        uint16_t headerLen;

        while (tok != 
# 627 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                     __null
# 627 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                         )
        {
            switch (tok->type)
            {

            case 8:
                switch (tok->directive)
                {
                case 1:
                    ram->put(tok->address, tok->value);
                    break;

                case 3:
                {
                    c = tok->str;

                    written = 0;
                    while (*c != '\0')
                    {
                        ram->putC(tok->address + written, *c);
                        written++;
                        c++;
                    }
                }
                break;

                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                {
                    headerLen = headerWord(tok);
                    c = tok->str;
                    ram->put(tok->address, headerLen);
                    written = 2;
                    while (*c != '\0')
                    {
                        ram->putC(tok->address + written, *c);
                        written++;
                        c++;
                    }
                }
                break;

                default:
                    break;
                }
                break;

            case 3:
                ram->put(tok->address, tok->value);
                break;

            case 4:
            {
                c = tok->str;

                written = 0;
                while (*c != '\0')
                {
                    ram->putC(tok->address + written, *c);
                    written++;
                    c++;
                }
            }
            break;

            case 0:
            {
                ram->putC(tok->address + 1, tok->highByte());
                ram->putC(tok->address, tok->lowByte());
                if(tok->opcode->isImmediate()) {
                    ram->put(tok->address + 2, tok->value);
                }
            }
            break;

            default:
                break;
            }

            tok = tok->next;
        }
    }

    bool dereferenceSymbol(Token *tok)
    {

        Symbol *sym;

        if (tok->isData())
        {


            sym = getSymbol(tok->str);
            if (sym->token == 
# 723 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                             __null
# 723 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                 )
            {
                printf("ERROR: unknown symbol %s at line %d \n", tok->str, tok->line);
                return false;
            }
            switch (sym->token->type)
            {
            case 2:
                tok->value = sym->token->value;
                break;
            case 1:
            case 4:
            case 3:
                tok->value = sym->token->address;
                break;
            default:
                break;
            }
        }
        else if (tok->isStringData())
        {
            printf("ERROR: invalid string data %s at line %d \n", tok->str, tok->line);
            return false;
        }
        else
        {
            if(tok->opcode->expectsU4()) {


                sym = getSymbol(tok->str);
                if (sym->token == 
# 753 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                                 __null
# 753 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                     )
                {
                    printf("ERROR: unknown symbol %s at line %d \n", tok->str, tok->line);
                    return false;
                }
                switch (sym->token->type)
                {
                    case 2:
                        tok->value = sym->token->value;
                        break;
                    case 1:
                    case 4:
                    case 3:
                        tok->value = sym->token->address;
                        break;
                    default:
                        break;
                }

                if (tok->value > 15 || tok->value < 0)
                {
                    printf("ERROR: tiny value exceeded (%d) at line %d \n", tok->value, tok->line);
                    return false;
                }

                tok->opcode->setArgB(tok->value);
                tok->symbolic = false;

            } else if(tok->opcode->expectsU8() || tok->opcode->expectsU8()) {


                sym = getSymbol(tok->str);
                if (sym->token == 
# 785 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                                 __null
# 785 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                     )
                {
                    printf("ERROR: unknown symbol %s at line %d \n", tok->str, tok->line);
                    return false;
                }
                tok->value = sym->token->value;

                if(tok->opcode->expectsU8() && (tok->value > 127 || tok->value < -128))
                {
                    printf("ERROR: signed byte value exceeded (%d) at line %d \n", tok->value, tok->line);
                    return false;
                } else if(tok->value > 255 || tok->value < -0) {
                    printf("ERROR: unsigned byte value exceeded (%d) at line %d \n", tok->value, tok->line);
                    return false;
                }

                tok->opcode->setArgA((tok->value & (0xf << 4)) >> 4);
                tok->opcode->setArgA(tok->value);
                tok->symbolic = false;
            } else if(tok->opcode->expectsU5()) {

                sym = getSymbol(tok->str);
                if (sym->token == 
# 807 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                                 __null
# 807 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                     )
                {
                    printf("ERROR: unknown symbol %s at line %d \n", tok->str, tok->line);
                    return false;
                }

                tok->value = sym->token->value;

                if((tok->value > 31 || tok->value < 0))
                {
                    printf("ERROR: U5 value exceeded (%d) at line %d \n", tok->value, tok->line);
                    return false;
                }
                tok->opcode->setU5(tok->value);
                tok->symbolic = false;
            } else if(tok->opcode->expectsU16()) {
                sym = getSymbol(tok->str);
                if (sym->token == 
# 824 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                                 __null
# 824 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                     )
                {
                    printf("ERROR: unknown symbol %s at line %d \n", tok->str, tok->line);
                    return false;
                }
                if (sym->token->isLabel() || sym->token->isVar() || sym->token->isStr())
                {
                    tok->value = sym->token->address;
                }
                else
                {
                    tok->value = sym->token->value;
                    if (tok->value > 65535 || tok->value < -32768)
                    {
                        printf("ERROR: long value exceeded (%d) at line %d \n", tok->value, tok->line);
                        return false;
                    }
                }
                tok->symbolic = false;
            }
        }

        return true;
    }

    Symbol *getSymbol(const char *name)
    {
        Symbol *sym = symbols;
        if (symbols == 
# 852 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                      __null
# 852 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                          )
        {
            symbols = new Symbol;
            symbols->name = name;
            sym = symbols;
        }
        else
        {
            Symbol *last;
            while (sym != 
# 861 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                         __null
# 861 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                             )
            {
                if (strcmp(sym->name, name) == 0)
                {
                    return sym;
                }
                last = sym;
                sym = sym->next;
            }

            sym = new Symbol;
            sym->name = name;
            last->next = sym;
        }
        return sym;
    }

    void skipLine()
    {
        while (idx < sourceLen)
        {
            if (source[idx] == '\n')
            {
                line++;
                lastPos = pos;
                pos = 1;
                return;
            }
            else
            {
                pos++;
            }
            idx++;
        }
    }

    Token *getToken() {
        Token *tok = _getToken();
        if(tok->isError()) {
            skipLine();
        }
        return tok;
    }

    Token *_getToken()
    {

        char c;
        while (idx < sourceLen)
        {

            skipSpaceOrEOL();
            if (idx >= sourceLen)
            {
                return Token::eof();
            }

            c = source[idx];
            switch (c)
            {
            case ' ':
                inc();
                break;
            case '\n':
                inc();
                break;
            case ';':
                inc();
                return getComment();
                break;
            case '#':
                inc();
                return getConstant();
                break;
            case '%':
                inc();
                return getVariable();
                break;
            case '$':
                inc();
                return getString();
                break;
            case '.':
                inc();
                return getDirective();
                break;
            default:
                if (isLabel())
                {
                    return getLabel();
                }
                else
                {
                    return getOpcode();
                }
                break;
            }
        }
        return Token::eof();
    }

    void skipSpaces()
    {
        while (idx < sourceLen)
        {
            if (isSpace(source[idx]))
            {
                inc();
            }
            else
            {
                break;
            }
        }
    }

    void skipSpaceOrEOL()
    {
        while (idx < sourceLen)
        {
            if (isSpaceOrEOL(source[idx]))
            {
                inc();
            }
            else
            {
                break;
            }
        }
    }



    bool isLabel()
    {
        int here = idx;

        while (here < sourceLen)
        {
            char c = source[here];
            if (isAlphaNumeric(c) || isUnderscore(c))
            {
                here++;
            }
            else
            {
                if (c == ':')
                {
                    return here > idx;
                }
                return false;
            }
        }
        return false;
    }

    bool isUnderscore(char c)
    {
        return c == '_';
    }

    bool isAlphaNumeric(char c)
    {
        return isAlpha(c) || isNumeric(c) || isSpecial(c);
    }

    bool isAlpha(char c)
    {
        if (c >= 'A' && c <= 'Z')
            return true;
        if (c >= 'a' && c <= 'z')
            return true;
        return false;
    }

    bool isAlphaOrUnderscore(char c)
    {
        return isAlpha(c) || isUnderscore(c);
    }

    bool isNumeric(char c)
    {
        if (c >= '0' && c <= '9')
            return true;
        return false;
    }

    bool isSpecial(char c)
    {
        return c == '_';
    }

    bool isSpace(char c)
    {
        if (c == ' ' || c == '\t')
        {
            return true;
        }
        return false;
    }

    bool isSpaceOrSemi(char c)
    {
        if (c == ' ' || c == '\t' || c == ';')
        {
            return true;
        }
        return false;
    }

    bool isSpaceSemiOrEOL(char c)
    {
        if (c == ' ' || c == '\t' || c == ';' || c == '\n')
        {
            return true;
        }
        return false;
    }

    bool isStar(char c)
    {
        return c == '*';
    }

    bool isAliasChar(char c)
    {
        return isAlphaNumeric(c) || isStar(c);
    }

    bool isTerminator(char c)
    {
        const char *terminators = " ;\n";
        const char *p = strchr(terminators, c);
        return p != 
# 1094 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                   __null
# 1094 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                       ;
    }

    bool isSpaceOrEOL(char c)
    {
        const char *spaces = " \n\t";
        const char *p = strchr(spaces, c);
        return p != 
# 1101 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                   __null
# 1101 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                       ;
    }

    bool isEOL(char c) {
        return c == '\n';
    }

    void inc()
    {
        if (idx < sourceLen)
        {
            if (source[idx] == '\n')
            {
                line++;
                lastPos = pos;
                pos = 1;
            }
            else
            {
                pos++;
            }
            idx++;
        }
    }

    void dec()
    {
        if (idx > 0)
        {
            idx--;
            if (source[idx] == '\n')
            {
                pos = lastPos;
                line--;
            }
        }
    }

    Token *getDirective()
    {

        if (!isAlpha(source[idx]))
        {
            return Token::error(line, pos, DIRECTIVE_EXPECTED);
        }
        int here = idx;
        int p = pos - 1;
        inc();
        while ((idx < sourceLen) && isAlpha(source[idx]))
        {
            inc();
        }

        int directive = vocab.findDirective(source, here, idx - here);
        if (directive == -1)
        {
            return Token::error(line, pos, DIRECTIVE_EXPECTED);
        }

        Token *tok = new Token(
# 1160 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                              __null
# 1160 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                  , line, p);
        tok->type = 8;
        tok->directive = directive;
        switch (tok->directive)
        {
        case 1:
        case 0:
            if (!getImm(tok))
            {
                return tok;
            }
            break;
        case 2:
            if (!getAlias(tok))
            {
                return tok;
            }
            break;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
            if (parseString(tok) == -1)
            {
                return Token::error(line, pos, NUMBER_EXPECTED);
            }
            break;

        default:
            break;
        }

        return tok;
    }

    bool getAlias(Token *tok) {
        if(getArgA(tok) && comma(tok) && getAliasName(tok)) {
            return true;
        }
        return false;
    }

    Token *getOpcode()
    {
        Token *tok;


        if (!isAlpha(source[idx]))
        {
            return Token::error(line, pos, OPCODE_EXPECTED);
        }
        int here = idx;
        int condition = 0;
        inc();
        while ((idx < sourceLen) && isAlphaOrUnderscore(source[idx]))
        {
            inc();
        }

        Opcode *opcode = vocab.findOpcode(source, here, idx - here);
        if (opcode == 
# 1222 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                     __null
# 1222 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                         )
        {
            return Token::error(line, pos, OPCODE_EXPECTED);
        }

        tok = new Token(
# 1227 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                       __null
# 1227 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                           , line, pos);
        tok->type = 0;
        tok->opcode = opcode;
        if (source[idx] == '[')
        {
            inc();
            condition = getCondition();
            if (condition == -1)
            {
                return Token::error(line, pos, INVALID_CONDITION);
            }
        }

        if (condition != 0)
        {
            tok->condition = condition;
        }

        if(tok->opcode->isALU()) {
            switch(tok->opcode->getALUMode()) {

                case 0:
                    instructionRR(tok);
                break;

                case 1:
                    instructionRU4(tok);
                break;

                case 2:
                    instructionU8(tok);
                 break;

                default:
                    instructionS8(tok);
                break;
            }

        } else if(tok->opcode->isLDS()) {
            switch(tok->opcode->getLDSMode()) {
                case 0:
                    instructionRR(tok);
                break;

                case 1:
                    instructionRR(tok);
                break;

                case 2:
                    instructionRR(tok);
                break;

                case 3:
                    instructionRR(tok);
                break;

                case 4:
                    instructionRR(tok);
                break;

                case 5:
                    instructionRR(tok);
                break;

                case 6:
                    instructionRR(tok);
                break;

                default:
                    instructionRR(tok);
                break;
            }

        } else if(tok->opcode->isJMP()) {

        } else {

        }
        return tok;
    }

    void instructionRa(Token *tok)
    {
        getArgA(tok);
    }

    void instructionRb(Token *tok)
    {
        getArgB(tok);
    }

    void instructionRR(Token *tok)
    {
        getArgA(tok) & comma(tok) & getArgB(tok);
    }

    void instructionU8(Token *tok)
    {
        getUImm8(tok);
    }

    void instructionS8(Token *tok)
    {
        getImm8(tok);
    }

    void instructionRU4(Token *tok)
    {
        getArgA(tok) & comma(tok) & getUImm4(tok);
    }

    void instructionRI(Token *tok)
    {
        getArgA(tok) & comma(tok) & getImm(tok);
    }






    int getCondition()
    {
        int cc = 8;
        if (source[idx] == 'N')
        {
            cc += 4;
            inc();
        }

        switch (source[idx])
        {
        case 'C':
            cc += 1;
            break;
        case 'Z':
            cc += 0;
            break;
        case 'M':
            cc += 2;
            break;
        case 'P':
            cc += 3;
            break;
        default:
            return -1;
        }
        inc();
        if (source[idx] != ']')
        {
            return -1;
        }
        inc();

        return cc;
    }




    bool comma(Token *tok)
    {
        skipSpaces();
        if (source[idx] != ',')
        {
            tok->type = 6;
            tok->str = COMMA_EXPECTED;
            return false;
        }
        inc();
        return true;
    }

    bool getImm4(Token *tok, bool swap = false)
    {

        if (getImm(tok))
        {
            if (tok->value > -9 && tok->value < 8)
            {
                if (swap)
                {
                    tok->arga = tok->value;
                }
                else
                {
                    tok->argb = tok->value;
                }
                return true;
            }
            tok->type = 6;
            tok->str = TINY_RANGE_EXCEEDED;
        }
        return false;
    }

    bool getUImm4(Token *tok)
    {
        if (getImm(tok))
        {
            if (tok->value >= 0 && tok->value < 16)
            {
                tok->argb = tok->value;
                return true;
            }
            tok->type = 6;
            tok->str = TINY_UNSIGNED_RANGE_EXCEEDED;
        }
        return false;
    }

    bool getImm8(Token *tok)
    {
        if (getImm(tok))
        {
            if (tok->value > -129 && tok->value < 128)
            {
                tok->arga = tok->value >> 4;
                tok->argb = tok->value & 0x0f;
                return true;
            }
            tok->type = 6;
            tok->str = IMMEDIATE_RANGE_EXCEEDED;
        }
        return false;
    }

    bool getUImm8(Token *tok)
    {
        if (getImm(tok))
        {
            if (tok->value >= 0 && tok->value < 256)
            {
                tok->arga = tok->value >> 4;
                tok->argb = tok->value & 0x0f;
                return true;
            }
            tok->type = 6;
            tok->str = UNSIGNED_IMMEDIATE_RANGE_EXCEEDED;
        }
        return false;
    }


    bool getImm(Token *tok)
    {
        skipSpaces();
        if (source[idx] == '#' || source[idx] == '$' || source[idx] == '%')
        {
            if (!getSymbolName(tok))
            {
                return false;
            }
        }
        else if (isAlpha(source[idx]))
        {
            if (!getSymbolName(tok))
            {
                return false;
            }
        }
        else if (parseNumber(tok) == -1)
        {
            return error(tok, NUMBER_OR_LABEL_EXPECTED);
        }
        return true;
    }



    bool getSymbolName(Token *tok)
    {
        int here = idx;
        idx++;
        pos++;
        if (idx == sourceLen)
        {
            return error(tok, NAME_EXPECTED);
        }

        while (idx <= sourceLen)
        {
            if (isSpaceSemiOrEOL(source[idx]))
            {
                break;
            }
            if (!isAlphaNumeric(source[idx]))
            {
                return error(tok, NAME_EXPECTED);
            }
            idx++;
            pos++;
        }
        int len = idx - here; char *name = (char *)malloc(len + 1);
        strncpy(name, &source[idx - len], len);
        name[len] = '\0';
            tok->str = name;
            tok->symbolic = true;
        return true;
    }




    bool getAliasName(Token *tok)
    {
        int here = idx;
        idx++;
        pos++;
        if (idx == sourceLen)
        {
            return error(tok, ALIAS_EXPECTED);
        }
        skipSpaces();
        while (idx < sourceLen)
        {
            if (isSpaceSemiOrEOL(source[idx]))
            {
                break;
            }
            if (!isAliasChar(source[idx]))
            {
                return error(tok, ALIAS_EXPECTED);
            }
            idx++;
            pos++;
        }
        int len = idx - here; char *name = (char *)malloc(len + 1);
        strncpy(name, &source[idx - len], len);
        name[len] = '\0';
        tok->str = name;
        return true;
    }

    bool error(Token *tok, const char *msg)
    {
        tok->type = 6;
        tok->str = msg;
        return false;
    }

    bool getArgA(Token *tok)
    {
        int arg;
        if ((arg = getArg(tok)) != -1)
        {
            tok->arga = arg;
            return true;
        }

        return false;
    }

    bool getArgB(Token *tok)
    {
        int arg;
        if ((arg = getArg(tok)) != -1)
        {
            tok->argb = arg;
            return true;
        }

        return false;
    }

    int getArg(Token *tok)
    {

        skipSpaces();
        int here = idx;
        while (idx < sourceLen)
        {
            if (!isAliasChar(source[idx]))
            {
                break;
            }
            inc();
        }

        if (idx == here)
        {
            tok->type = 6;
            tok->str = REGISTER_NAME_EXPECTED;
            return -1;
        }
        int arg = vocab.findArg(source, here, idx - here);
        if (arg == -1)
        {
            tok->type = 6;
            tok->str = REGISTER_NAME_EXPECTED;
            return -1;
        }

        return arg;
    }

    Token *getComment()
    {

        Token *tok = new Token(
# 1626 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                              __null
# 1626 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                  , line, pos);

        int len;
        len = moveTo('\n');
        if (len == -1)
        {
            return Token::eof();
        }

        char *comment = (char *)malloc(len + 1);
        strncpy(comment, &source[idx - len], len);
        comment[len] = '\0';
        tok->str = comment;
        tok->type = 5;
        tok->pos -= 1;
        return tok;
    }

    Token *getConstant()
    {
        Token *tok = _getLabel(2, ':');
        inc();
        if (parseNumber(tok) == -1)
        {
            return Token::error(line, pos, NUMBER_EXPECTED);
        }


        Option *opt = getOption(tok->name);
        if(opt != 
# 1655 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                 __null
# 1655 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                     ) {
            tok->value = opt->value;
        }

        return tok;
    }

    Token *getVariable()
    {
        Token *tok = _getLabel(3, ':');
        inc();
        skipSpaces();
        if (source[idx] == '#')
        {
            if (!getSymbolName(tok))
            {
                return Token::error(line, pos, CONSTANT_EXPECTED);
            }
        }
        else if (parseNumber(tok) == -1)
        {
            return Token::error(line, pos, NUMBER_EXPECTED);
        }
        return tok;
    }

    Token *getLabel()
    {
        Token *tok = _getLabel(1, ':', false);
        inc();
        return tok;
    }

    Token *getString()
    {
        Token *tok = _getLabel(4, ':');
        inc();
        if (parseString(tok) == -1)
        {
            return Token::error(line, pos, STRING_EXPECTED);
        }
        return tok;
    }

    Token *_getLabel(uint8_t type, char sep, bool typed = true)
    {

        int len;
        len = moveTo(sep);
        if (len == -1)
        {
            return Token::eof();
        }

        if (typed)
            len++;

        Token *tok = new Token(
# 1712 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                              __null
# 1712 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                  , line, pos - len);
        char *name = (char *)malloc(len + 1);
        strncpy(name, &source[idx - len], len);
        name[len] = '\0';
        tok->name = name;
        tok->type = type;
        return tok;
    }





    int parseNumber(Token *tok)
    {





        char c;
        while (idx < sourceLen)
        {
            c = source[idx];
            switch (c)
            {
            case '\'':
                inc();
                if (idx >= sourceLen)
                {
                    return -1;
                }

                if (source[idx] == '\\')
                {
                    inc();
                    if (idx >= sourceLen)
                    {
                        return -1;
                    }
                    c = parseEscapedChar(source[idx]);
                }
                break;
            case '0':
                inc();
                if (idx >= sourceLen)
                {
                    return -1;
                }
                if (source[idx] == 'x')
                {
                    inc();
                    return parseHex(tok);
                }

                if (source[idx] == 'b')
                {
                    inc();
                    return parseBin(tok);
                }

                dec();
                [[fallthrough]];
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case '-':
                return parseDec(tok);

            case ' ':
            case '\t':

                inc();
                break;

            default:
                return -1;
            }
        }
        return -1;
    }

    char parseEscapedChar(char c)
    {
        switch (c)
        {
        case 'n':
            return '\n';
        case '0':
            return 0;
        case 'b':
            return '\b';
        case 'r':
            return '\r';
        case 't':
            return '\t';
        case '\\':
            return '\\';
        case '\'':
            return '\'';
        case '"':
            return '"';
        default:
            return c;
        }
    }

    int parseString(Token *tok)
    {
        int c;
        int len;
        int escapedLen = 0;
        while ((c = getChar()) != -1)
        {
            if (c == '"')
            {
                len = moveTo('"');
                char *str = (char *)malloc(len + 1);
                tok->str = str;


                for (int i = 0; i < len; i++)
                {
                    c = source[idx - len + i];
                    if (c == '\\')
                    {
                        c = parseEscapedChar(source[idx - len + i + 1]);
                        i++;
                    }
                    *str = c;
                    str++;
                    escapedLen++;
                }

                *str = '\0';
                tok->value = escapedLen;
                inc();
                return 0;
            }
            else if (c != ' ')
            {
                return -1;
            }
        }
        return -1;
    }





    bool parseHex(Token *tok)
    {
        tok->value = 0;
        int c = getChar();

        if (c == -1)
        {
            return hexError(tok);
        }

        int hv = hexVal(c);
        if (hv == -1)
        {
            return hexError(tok);
        }

        tok->value = hv;

        for (uint8_t i = 0; i < 3; i++)
        {
            c = getChar();
            if (c == -1)
            {

                return true;
            }
            if (isTerminator(c))
            {
                return true;
            }
            hv = hexVal(c);
            if (hv == -1)
            {
                return hexError(tok);
            }
            tok->value = (tok->value * 16) + hv;
        }

        if (idx >= sourceLen)
        {
            return true;
        }
        if (isTerminator(source[idx]))
        {
            return true;
        }

        return hexError(tok);
    }

    bool hexError(Token *tok)
    {
        tok->type = 6;
        tok->str = HEX_NUMBER_EXPECTED;
        return false;
    }

    int hexVal(char c)
    {
        const char *hexen = "0123456789ABCDEFabcdef";
        const char *p = strchr(hexen, c);
        if (p != 
# 1930 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                __null
# 1930 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                    )
        {
            uint8_t l = p - hexen;
            if (l > 15)
                l = l - 6;
            return l;
        }
        return -1;
    }





    bool parseBin(Token *tok)
    {
        tok->value = 0;
        int c = getChar();

        if (c == -1)
        {
            return binError(tok);
        }

        int hv = binVal(c);
        if (hv == -1)
        {
            return binError(tok);
        }

        tok->value = hv;

        for (uint8_t i = 0; i < 15; i++)
        {
            c = getChar();
            if (c == -1)
            {

                return true;
            }
            if (isTerminator(c))
            {
                return true;
            }
            hv = binVal(c);
            if (hv == -1)
            {
                return binError(tok);
            }
            tok->value = (tok->value * 2) + hv;
        }

        if (idx >= sourceLen)
        {
            return true;
        }
        if (isTerminator(source[idx]))
        {
            return true;
        }

        return binError(tok);
    }

    bool binError(Token *tok)
    {
        tok->type = 6;
        tok->str = BINARY_NUMBER_EXPECTED;
        return false;
    }

    int binVal(char c)
    {
        const char *hexen = "01";
        const char *p = strchr(hexen, c);
        if (p != 
# 2005 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                __null
# 2005 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                    )
        {
            uint8_t l = p - hexen;
            return l;
        }
        return -1;
    }





    bool parseDec(Token *tok)
    {
        tok->value = 0;
        int c = getChar();
        bool negative = false;

        if (c == '-')
        {
            negative = true;
            c = getChar();
        }

        if (c == -1)
        {
            return decError(tok);
        }

        int hv = decVal(c);
        if (hv == -1)
        {
            return decError(tok);
        }

        tok->value = hv;

        for (uint8_t i = 0; i < 5; i++)
        {
            c = getChar();
            if (c == -1)
            {

                return true;
            }
            if (isTerminator(c))
            {
                if (negative)
                    tok->value = 0 - tok->value;
                return true;
            }
            hv = decVal(c);
            if (hv == -1)
            {
                return decError(tok);
            }
            tok->value = (tok->value * 10) + hv;
        }
        if (negative)
            tok->value = 0 - tok->value;

        if (idx >= sourceLen)
        {
            return true;
        }
        if (isTerminator(source[idx]))
        {
            return true;
        }

        return decError(tok);
    }

    bool decError(Token *tok)
    {
        tok->type = 6;
        tok->str = DECIMAL_NUMBER_EXPECTED;
        return false;
    }

    int decVal(char c)
    {
        const char *decs = "0123456789";
        const char *p = strchr(decs, c);
        if (p != 
# 2089 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                __null
# 2089 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                    )
        {
            uint8_t l = p - decs;
            return l;
        }
        return -1;
    }

    int getChar()
    {
        if (idx < sourceLen)
        {
            char c = source[idx];
            inc();
            return c;
        }
        return -1;
    }







    int moveTo(char sep)
    {

        char c;
        int len = 0;
        bool found = false;
        while (idx < sourceLen)
        {
            c = source[idx];
            if(c == '\\') {
                found = true;
                inc();
                inc();
                len++;
                len++;
            } else {
                if ((c == sep) || (c == '\n'))
                {
                    break;
                }
                found = true;
                inc();
                len++;
            }
        }

        if (found)
        {
            return len;
        }

        if (idx >= sourceLen)
        {
            return -1;
        }

        return 0;
    }




    Token *append(char *name, int line, int pos)
    {
        if (tokens == 
# 2158 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                     __null
# 2158 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                         )
        {

            tokens = new Token(name, line, pos);
            return tokens;
        }


        Token *tok = tokens;
        bool more = true;
        while (more)
        {
            if (tok->isNamed(name))
            {
                printf("Token %s at line %d pos %d redefined at line %d pos %d",
                       name, tok->line, tok->pos, line, pos);
                return 
# 2174 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                      __null
# 2174 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                          ;
            }
            if (tok->next != 
# 2176 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                            __null
# 2176 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                                )
            {
                tok = tok->next;
            }
            else
            {
                more = false;
            }
        }

        Token *last = new Token(name, line, pos);
        tok->next = last;
        return last;
    }

    char *source;
    long sourceLen;
    long idx;
    int line;
    int pos;
    int lastPos;
    long addr;
    Token *tokens = 
# 2198 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                   __null
# 2198 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                       ;
    Token *currentLabel = 
# 2199 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                         __null
# 2199 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                             ;
    Symbol *symbols = 
# 2200 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                     __null
# 2200 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                         ;
    Option *options = 
# 2201 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 3 4
                     __null
# 2201 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h"
                         ;
    AssemblyVocabulary vocab;
    bool phase1Error;
    bool phase2Error;
    bool phase3Error;
};
# 10 "/home/duncan/src/ForthCPUEmulator/main.cpp" 2
# 1 "/home/duncan/src/ForthCPUEmulator/tools/Loader.h" 1



# 1 "/home/duncan/src/ForthCPUEmulator/tools/../runtime/ForthCPU/ForthVM.h" 1
# 5 "/home/duncan/src/ForthCPUEmulator/tools/Loader.h" 2

class Loader {

    public:

    Loader(Memory *ram) : _ram(ram), _pc(0) {}
    ~Loader() {}

    void reset() {
        _pc = 0;
    }

    void loadGen(uint16_t genOp) {
        uint16_t instruction =
            (0 << 14)
            + (genOp << 10);
        load(instruction);
    }



    void loadLDS(uint16_t ldsOp, uint16_t ldsMode, uint16_t arga, uint16_t argb) {
        uint16_t instruction = (1 << 14)
            + (ldsOp << 11)
            + (ldsMode << 8)
            + (arga << 4)
            + (argb & 0x0f);
        switch(ldsMode) {
            case 1:
                load(instruction);
                instruction = argb;
                break;
            case 4:
            case 5:
            case 6:
            case 7:
                instruction += (argb & 0x10) << 13;
                break;
            default: break;
        }
        load(instruction);
    }

    void loadJMP(uint16_t skip, uint16_t cc, uint16_t jmpOp, bool link) {
        uint16_t instruction =
            (2 << 14)
            + (skip << 12)
            + (cc << 10)
            + (jmpOp << 8)
            + (link ? 0x0080 : 0);
        load(instruction);
    }

    void loadALU(uint16_t aluOp, uint16_t aluMode, uint16_t arga, uint16_t argb) {
        uint16_t instruction =
           (3 << 14)
            + (aluOp << 10)
            + (aluMode << 8)
            + ((arga & 0x0f) << 4)
            + ((argb & 0x0f) << 0);
        load(instruction);
    }

   void loadALU(uint16_t aluOp, uint16_t aluMode, int16_t value) {
        uint16_t instruction =
           (3 << 14)
            + (aluOp << 10)
            + (aluMode << 8)
            + value;
        load(instruction);
    }

    void load(uint16_t value) {
         _ram->put(_pc, value);
        _pc += 2;
    }

    void load(char c, bool inc) {
        uint16_t v = _ram->get(_pc);

        if(inc) {
            v = v & 0xff;
            v = v | ((uint16_t)c << 8);
            load(v);
        } else {
            v = v & 0xff00;
            v = v | c;
            _ram->put(_pc, v);
        }
    }

    uint16_t load(const char *str) {
        char c;
        bool h = false;
        while((c = *str++) != 0) {
            load(c, h);
            h = !h;
        }

        if(h) load('\0', h);
        return _pc;
    }

    protected:

    Memory *_ram;
    uint32_t _pc;

};
# 11 "/home/duncan/src/ForthCPUEmulator/main.cpp" 2
# 1 "/home/duncan/src/ForthCPUEmulator/tools/Dumper.h" 1



# 1 "/home/duncan/src/ForthCPUEmulator/tools/Assembler.h" 1
# 5 "/home/duncan/src/ForthCPUEmulator/tools/Dumper.h" 2

class Dumper {

    public:
    Dumper() {}
    ~Dumper() {}

    void writeCPP(const char *name, Assembler *fasm, Memory *mem, uint16_t romStart, uint16_t romSize, bool progmem) {
        FILE *fp = fopen(name, "w");
        fprintf(fp, "#ifndef UKMAKER_FORTH_IMAGE_H\n");
        fprintf(fp, "#define UKMAKER_FORTH_IMAGE_H\n");
        fprintf(fp, "#include \"FArduino.h\"\n");
        fprintf(fp,"/******************************\n");
        fprintf(fp, "* Constants\n");
        fprintf(fp, "*****************************/\n");
        fprintf(fp,"#define FORTH_ROMSIZE 0x%x\n", romSize);
        Token *tok = fasm->tokens;
        while(tok != 
# 22 "/home/duncan/src/ForthCPUEmulator/tools/Dumper.h" 3 4
                    __null
# 22 "/home/duncan/src/ForthCPUEmulator/tools/Dumper.h"
                        ) {
            if(tok->isConst()) {
                fprintf(fp, "#define FORTH_%s 0x%04x\n", tok->name+1, tok->value);
            }
            tok = tok->next;
        }

        if(progmem) {
            fprintf(fp, "const uint8_t rom[%d] PROGMEM = {\n",romSize);
        } else {
            fprintf(fp, "const uint8_t rom[%d] = {\n",romSize);
        }

        uint16_t last = romSize % 8;
        bool first = true;

        for(uint16_t i=0; i<romSize-last; i+=8) {
            writeLine(fp, mem, romStart, i, 8, first);
            first = false;
        }

        writeLine(fp, mem, romStart, romSize - last, last, false);

        fprintf(fp, "}; // rom\n");

        fprintf(fp, "#endif // UKMAKER_FORTH_IMAGE_H\n");


        fclose(fp);
    }

    void writeLine(FILE *fp, Memory *mem, uint16_t romStart, uint16_t start, uint16_t n, bool first) {

        fprintf(fp, "/* 0x%04x */  ", (uint16_t)romStart + start);

        for(uint16_t j=0; j<n; j++) {
            if(first) {
                fprintf(fp," 0x%02x ", mem->getC(romStart + start + j));
            } else {
                fprintf(fp,",0x%02x ", mem->getC(romStart + start + j));
            }
            first = false;
        }
        fprintf(fp, "   /* ");
        for(uint16_t j=0; j<n; j++) {
            uint8_t c = (char)mem->getC(romStart + start +j);
            c = c > 32 ? c : 32;
            fprintf(fp,"%c ", (char)c);
        }

        fprintf(fp, "*/\n");
    }

    void dump(Assembler *fasm) {

        printf("==============================\n");
        printf("Code \n");
        printf("==============================\n");
        Token *tok = fasm->tokens;
        while(tok != 
# 81 "/home/duncan/src/ForthCPUEmulator/tools/Dumper.h" 3 4
                    __null
# 81 "/home/duncan/src/ForthCPUEmulator/tools/Dumper.h"
                        ) {
            switch(tok->type) {
                case 5: break;
                case 2:
                    printf("%s: %04x\n", tok->name, tok->value);
                    break;
                case 1:
                    printf("%04x ", tok->address);
                    printf("%s: \n", tok->name);
                    break;
                case 0:
                    printf("%04x   ", tok->address);
                    printOpcode(fasm, tok);
                    printf("\n");
                    break;
                case 4:
                    printf("%04x ", tok->address);
                    printf("%s: %s\n", tok->name, tok->str);
                    break;
                case 3:
                    printf("%04x ", tok->address);
                    printf("%s: %04x\n", tok->name, tok->value);
                    break;
                case 8:

                    switch(tok->directive) {
                        case 0: printf(".ORG: %04x\n", tok->value); break;
                        case 1:
                            printf("%04x ", tok->address);
                            printf(".DATA: %04x\n", tok->value);
                            break;
                        case 3:
                            printf("%04x ", tok->address);
                            printf(".SDATA: \"%s\"\n", tok->str);
                            break;
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                            printf("%04x ", tok->address);
                            printf("%04x .SDATA: \"%s\"\n", fasm->headerWord(tok), tok->str);
                            break;
                        default: break;
                    }
                break;
                default: break;
            }
            tok = tok->next;
        }
    }

    void instructionRR(Assembler *fasm, Token *tok) {
        printf("%s,%s",fasm->vocab.argname(tok->arga), fasm->vocab.argname(tok->argb));
    }

    void instructionRU4(Assembler *fasm, Token *tok) {

        if(tok->symbolic) {
            printf("%s,%s",fasm->vocab.argname(tok->arga), tok->str);
        } else {
            printf("%s,%01x",fasm->vocab.argname(tok->arga), tok->value);
        }
    }

    void instructionU8(Assembler *fasm, Token *tok) {
        if(tok->symbolic) {
            printf("%s", tok->str);
        } else {
            printf("%0x2", tok->value);
        }
    }

    void instructionS8(Assembler *fasm, Token *tok) {
        if(tok->symbolic) {
            printf("%s", tok->str);
        } else {
            printf("%0x2", tok->value);
        }
    }

    void instructionU16(Assembler *fasm, Token *tok) {
        if(tok->symbolic) {
            printf("%s,%s",fasm->vocab.argname(tok->arga), tok->str);
        } else {
            printf("%s,%04x",fasm->vocab.argname(tok->arga), tok->value);
        }
    }

    void printOpcode(Assembler *fasm, Token *tok) {
        printf("%s", tok->opcode->getName());
        if(tok->isConditional()) {
            printf("[");
            if(tok->isConditionNegated()) {
                printf("N");
            }
            printf("%s", fasm->vocab.ccname(tok->getCondition()));
            printf("] ");
        } else {
            printf(" ");
        }

        if(tok->opcode->isALU()) {
            switch(tok->opcode->getALUMode()) {

                case 0:
                    instructionRR(fasm, tok);
                break;

                case 1:
                    instructionRU4(fasm, tok);
                break;

                case 2:
                    instructionU8(fasm, tok);
                 break;

                default:
                    instructionS8(fasm, tok);
                break;
            }

        } else if(tok->opcode->isLDS()) {
            switch(tok->opcode->getLDSMode()) {
                case 0:
                    instructionRR(fasm, tok);
                break;

                case 1:
                    instructionRR(fasm, tok);
                break;

                case 2:
                    instructionRR(fasm, tok);
                break;

                case 3:
                    instructionRR(fasm, tok);
                break;

                case 4:
                    instructionRR(fasm, tok);
                break;

                case 5:
                    instructionRR(fasm, tok);
                break;

                case 6:
                    instructionRR(fasm, tok);
                break;

                default:
                    instructionRR(fasm, tok);
                break;
            }

        } else if(tok->opcode->isJMP()) {

        } else {

        }
    }

};
# 12 "/home/duncan/src/ForthCPUEmulator/main.cpp" 2
# 1 "/home/duncan/src/ForthCPUEmulator/tools/Debugger.h" 1





# 1 "/home/duncan/src/ForthCPUEmulator/tools/Dumper.h" 1
# 7 "/home/duncan/src/ForthCPUEmulator/tools/Debugger.h" 2

class Debugger
{

public:
    Debugger() {}
    ~Debugger() {}

    void setAssembler(Assembler *fasm)
    {
        _asm = fasm;
    }

    void setVM(ForthVM *vm)
    {
        _vm = vm;
    }

    void setDumper(Dumper *dumper)
    {
        _dumper = dumper;
    }

    void setShowForthWordsOnly()
    {
        _showWords = true;
    }

    void setBump(uint16_t b)
    {
        _bump = b;
    }

    void setBreakpoint1(uint16_t addr)
    {
        _breakpoint1 = addr;
    }
    void setBreakpoint2(uint16_t addr)
    {
        _breakpoint2 = addr;
    }

    void setLabelBreakpoint1(const char *name)
    {
        int addr = _asm->getLabelAddress(name);
        if (addr != -1)
        {
            setBreakpoint1(addr);
        }
    }

    void setLabelBreakpoint2(const char *name)
    {
        int addr = _asm->getLabelAddress(name);
        if (addr != -1)
        {
            setBreakpoint2(addr);
        }
    }

    void printWALabel(uint16_t wa) {
        Token *label = _asm->getLabel(wa);
        if(label != 
# 69 "/home/duncan/src/ForthCPUEmulator/tools/Debugger.h" 3 4
                   __null
# 69 "/home/duncan/src/ForthCPUEmulator/tools/Debugger.h"
                       ) {
            printf("%s\n", label->name);
        }
    }

    void setVerbose(bool v) {
        _verbose = v;
    }

    void breakpoint()
    {
        if (_vm->get(10) == _breakpoint2)
        {
            printf("I *");
        }
        else if (_vm->getPC() == _breakpoint1)
        {
            printf("PC*");
        }
        else if(_verbose)
        {
            printf("  ");
        }

        if(_bump > 0 && ((_steps % _bump) == 0))
        {
            printf("  ");
        }
        _steps++;
    }

    void reset()
    {
        _vm->reset();
    }

    void step()
    {
        printCurrentStep();
        _vm->step();
    }

    void run()
    {
        while (!_vm->halted())
            step();
    }

    void run(uint16_t steps)
    {
        for (uint16_t i = 0; i < steps; i++)
        {
            if (!_vm->halted())
                step();
        }
    }

    void printCurrentStep()
    {
        uint16_t pc = _vm->getPC();
        uint16_t instr = _vm->ram()->get(pc);

        const char *label = 
# 131 "/home/duncan/src/ForthCPUEmulator/tools/Debugger.h" 3 4
                           __null
# 131 "/home/duncan/src/ForthCPUEmulator/tools/Debugger.h"
                               ;
        Token *tok = _asm->getOpcode(pc);
        if (tok != 
# 133 "/home/duncan/src/ForthCPUEmulator/tools/Debugger.h" 3 4
                  __null 
# 133 "/home/duncan/src/ForthCPUEmulator/tools/Debugger.h"
                       && tok->label != 
# 133 "/home/duncan/src/ForthCPUEmulator/tools/Debugger.h" 3 4
                                        __null
# 133 "/home/duncan/src/ForthCPUEmulator/tools/Debugger.h"
                                            )
        {
            label = tok->label->name;
        }

        if (label != 
# 138 "/home/duncan/src/ForthCPUEmulator/tools/Debugger.h" 3 4
                    __null
# 138 "/home/duncan/src/ForthCPUEmulator/tools/Debugger.h"
                        ) {
            if(_verbose && _showWords) {


                    printf(" ");


            }
            if(_verbose) printf("%s\n", label);
        }

        breakpoint();

        if(!_verbose || _showWords) return;
        printf("%04x - %04x D[%04x] R[%04x] [S%d O%d Z%d C%d] [0:%04x 1:%04x 2:%04x 3:%04x 4:%04x 5:%04x 6:%04x 7:%04x",
               pc,
               _vm->ram()->get(pc),
               _vm->ram()->get(_vm->get(13) + 2),
               _vm->ram()->get(_vm->get(14) + 2),
               _vm->getS() ? 1 : 0, _vm->getO() ? 1 : 0, _vm->getZ() ? 1 : 0, _vm->getC() ? 1 : 0,
               _vm->get(0),
               _vm->get(1),
               _vm->get(2),
               _vm->get(3),
               _vm->get(4),
               _vm->get(5),
               _vm->get(6),
               _vm->get(7));


        printf(" A:%04x B:%04x PC:%04x WA:%04x SP:%04x RS:%04x FP:%04x I:%04x]",
               _vm->get(8),
               _vm->get(9),
               _vm->getPC(),
               _vm->get(12),
               _vm->get(13),
               _vm->get(14),
               _vm->get(11),
               _vm->get(10));

        _dumper->printOpcode(_asm, tok);

        printf("\n");
    }

protected:
    Assembler *_asm;
    ForthVM *_vm;
    Dumper *_dumper;
    uint16_t _breakpoint1, _breakpoint2;
    bool _showWords = false;
    uint16_t _bump = 0;
    uint16_t _steps = 0;
    bool _verbose = false;

};
# 13 "/home/duncan/src/ForthCPUEmulator/main.cpp" 2

# 1 "/home/duncan/src/ForthCPUEmulator/tests/Test.h" 1



# 1 "/home/duncan/src/ForthCPUEmulator/tests/TestSuite.h" 1







class TestSuite {

    public:
    TestSuite() {}
    ~TestSuite() {}

     int tests;
     int passed;
     int failed;

    void reset() {
        tests = 0;
        passed = 0;
        failed = 0;
    }
};
# 5 "/home/duncan/src/ForthCPUEmulator/tests/Test.h" 2
# 1 "/home/duncan/src/ForthCPUEmulator/tests/../runtime/ForthCPU/ForthVM.h" 1
# 6 "/home/duncan/src/ForthCPUEmulator/tests/Test.h" 2
# 1 "/home/duncan/src/ForthCPUEmulator/tests/../tools/Assembler.h" 1
# 7 "/home/duncan/src/ForthCPUEmulator/tests/Test.h" 2
# 1 "/home/duncan/src/ForthCPUEmulator/tests/../tools/Loader.h" 1
# 8 "/home/duncan/src/ForthCPUEmulator/tests/Test.h" 2

class Test {

    public:

    TestSuite *testSuite;
    ForthVM *vm;
    Assembler *fasm;
    Loader *loader;

    Test(TestSuite *suite, ForthVM *fvm, Assembler *vmasm, Loader *vmloader) {
        testSuite = suite;
        vm = fvm;
        fasm = vmasm;
        loader = vmloader;
    }

    ~Test() {}

    virtual void run()=0;

    void shouldOpenAsmFile(const char *file, uint32_t size) {
        printf("         shouldOpenAsmFile\n");
        assert(fasm->slurp(file), "Failed to open file ", file);
        assertEquals(fasm->fileSize(), size, "Wrong file size");
    }


    void shouldGetAnOpcode(const char *name, uint8_t opcode) {
        printf("         shouldGet%s\n", name);
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize an opcode");
        assertEquals(tok->type, 0, "Type should be OPCODE");
        assertEquals(tok->opcode->getCode(), opcode, "Should be an instruction");
    }

    void shouldGetALabel(const char *name) {
        printf("         shouldGetLabel %s\n", name);
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize a line label");
        assertEquals(tok->type, 1, "Type should be LABEL");
        assertString(tok->name, name, "Should parse label");
    }

   void shouldGetAConstant(const char *name, uint16_t value) {
        printf("         shouldGetConstant %s\n", name);
        Token *tok = fasm->getToken();
        assertEquals(tok->type, 2, "Type should be CONST");
        assertString(tok->name, name, "Name");
        assertEquals(tok->value, value, "Value");
    }

   void shouldGetAnAlias(uint8_t reg, const char *alias) {
        printf("         shouldGetAlias %s\n", alias);
        Token *tok = fasm->getToken();
        assertEquals(tok->type, 8, "Type should be DIRECTIVE");
        assertEquals(tok->directive, 2, "Should be an ALIAS");
        assertEquals(tok->arga, reg, "Register");
        assertString(tok->str, alias, "Alias");
    }


    void skipTokens(int n) {
        for(int i=0; i<n; i++) {
            fasm->getToken();
        }
    }

    bool should(bool passedTest) {
        testSuite->tests++;
        if(passedTest) {
            testSuite->passed++;
        } else {
            testSuite->failed++;
        }
        return passedTest;
    }

    void assert(bool t, const char *m) {
        if(should(t)) {
            printf("[OK    ]");
        } else {
            printf("[FAILED]");
        }

        printf(" %s - \n", m);
    }

    void assert(bool t, const char *m, const char *m1) {
        if(should(t)) {
            printf("[OK    ]");
        } else {
            printf("[FAILED]");
        }

        printf(" %s %s - \n", m, m1);
    }

    void assertEquals(uint16_t a, uint16_t b, const char *m) {

        if(should(a == b)) {
            printf("[OK    ]");
            printf(" [%d == %d] %s\n", a, b, m);
        } else {
            printf("[FAILED]");
            printf(" [%d != %d] %s\n", a, b, m);
        }
    }

    void assertString(const char *a, const char *b, const char *m) {
        if(a == 
# 118 "/home/duncan/src/ForthCPUEmulator/tests/Test.h" 3 4
               __null 
# 118 "/home/duncan/src/ForthCPUEmulator/tests/Test.h"
                    && b == 
# 118 "/home/duncan/src/ForthCPUEmulator/tests/Test.h" 3 4
                            __null
# 118 "/home/duncan/src/ForthCPUEmulator/tests/Test.h"
                                ) {
            printf("[OK    ] %s\n", m);
            should(true);
        } else if(a == 
# 121 "/home/duncan/src/ForthCPUEmulator/tests/Test.h" 3 4
                      __null
# 121 "/home/duncan/src/ForthCPUEmulator/tests/Test.h"
                          ) {
            printf("[FAILED]");
            printf(" [NULL != %s] %s\n", b, m);
            should(false);
        } else if(b == 
# 125 "/home/duncan/src/ForthCPUEmulator/tests/Test.h" 3 4
                      __null
# 125 "/home/duncan/src/ForthCPUEmulator/tests/Test.h"
                          ) {
            printf("[FAILED]");
            printf(" [%s != NULL] %s\n", a, m);
            should(false);
        } else if(strcmp(a,b) != 0) {
            printf("[FAILED]");
            printf(" [%s != %s] %s\n", a, b, m);
            should(false);
        } else {
            printf("[OK    ]");
            printf(" [%s == %s] %s\n", a, b, m);
            should(true);
        }
    }


};
# 15 "/home/duncan/src/ForthCPUEmulator/main.cpp" 2
# 1 "/home/duncan/src/ForthCPUEmulator/tests/VMTests.h" 1



# 1 "/home/duncan/src/ForthCPUEmulator/tests/Test.h" 1
# 5 "/home/duncan/src/ForthCPUEmulator/tests/VMTests.h" 2

void VMTests_printC(ForthVM *vm) {


    uint16_t v = vm->pop();
    char c = (char) v;

    printf("%c", c);
}

class VMTests : public Test {

    public:
    VMTests(TestSuite *suite, ForthVM *fvm, Assembler *vmasm, Loader *loader) : Test(suite, fvm, vmasm, loader) {}

    void run() {

    testSuite->reset();

    shouldHalt();
    shouldAdd();
    shouldGenerateCarry();
    shouldSub();
    shouldSubL();
    shouldMulL();
    shouldAnd();
    shouldLDBI();
    shouldAddI();
    shouldCMP();
    printf("==============================\n");
    printf("TOTAL: %d  PASSED %d  FAILED %d\n", testSuite->tests, testSuite->passed, testSuite->failed);
    printf("==============================\n");
}


void shouldHalt() {

    vm->ram()->put(0, 1 << 10);
    vm->reset();
    vm->step();
    assert(vm->halted(), "VM should be halted");

}

void shouldAdd() {
    loader->reset();
    loader->loadALU(0, 0, 8, 3);
    loader->loadALU(0, 0, 9, 7);
    loader->loadALU(1, 0, 8, 9);
    loader->loadGen(1);
    vm->reset();
    vm->step();
    vm->step();
    vm->step();
    vm->step();
    assert(vm->get(8) == 10, "Should add");
}

void shouldGenerateCarry() {
    loader->reset();
    loader->loadLDS(0, 1, 0,0);
    loader->load(0x8000);
    loader->loadLDS(0, 1, 1,0);
    loader->load(0x8000);
    loader->loadALU(1, 0, 0, 1);
    loader->loadGen(1);
    vm->reset();
    vm->step();
    vm->step();
    vm->step();
    vm->step();
    assert(vm->get(0) == 0, "Should add");
    assert(vm->getC(), "Should generate carry");
}

void shouldSub() {
    loader->reset();
    loader->loadALU(0, 0, 8, 3);
    loader->loadALU(0, 0, 9, 7);
    loader->loadALU(2, 0, 8, 9);
    loader->loadGen(1);
    vm->reset();
    vm->step();
    vm->step();
    vm->step();
    vm->step();
    assertEquals(vm->get(8), -4, "SUB result");
    assert(vm->getC(), "SUB should set carry");
}

void shouldSubL() {
    loader->reset();
    loader->loadLDS(0, 1, 8, 0xaaaa);
    loader->loadLDS(0, 1, 9, 0x1111);
    loader->loadALU(2, 0, 8, 9);
    loader->loadGen(1);
    vm->reset();
    vm->step();
    vm->step();
    vm->step();
    vm->step();
    assertEquals(vm->get(8), 0xaaaa - 0x1111, "SUBL result");
    assert(!vm->getC(), "SUB should not set carry");
}

void shouldMulL() {
    loader->reset();
    loader->loadLDS(0, 1, 8, 0);
    loader->load(0x1111);
    loader->loadLDS(0, 1, 9, 0);
    loader->load(4);
    loader->loadALU(3, 0, 8, 9);
    loader->loadGen(1);
    vm->reset();
    vm->step();
    vm->step();
    vm->step();
    vm->step();
    assertEquals(vm->get(8), 0x4444, "MUL result");
    assert(!vm->getC(), "MUL should not set carry");
}

void shouldAnd() {
    loader->reset();
    loader->loadLDS(0, 1, 8, 0);
    loader->load(0x1111);
    loader->loadLDS(0, 1, 9, 0);
    loader->load(0x1010);
    loader->loadALU(5, 0, 8, 9);
    loader->loadGen(1);
    vm->reset();
    vm->step();
    vm->step();
    vm->step();
    vm->step();
    assertEquals(vm->get(8), 0x1010, "AND result");
    assert(!vm->getC(), "AND should not set carry");
}


void shouldLDBI() {
    loader->reset();
    loader->loadALU(0, 0, 9, 5);
    vm->reset();
    vm->step();

    assertEquals(vm->get(9), 5, "B should be 5");
}

void shouldAddI() {
    loader->reset();
    loader->loadALU(0, 3, 5);
    loader->loadALU(1, 3, -2);
    vm->reset();
    vm->step();
    vm->step();

    assertEquals(vm->get(8), 3, "A should be 3 after add");
}

void shouldCMP() {
    loader->reset();
    loader->loadALU(0, 0, 8, 0);
    loader->loadALU(0, 0, 9, 0);
    loader->loadALU(14, 8, 9);
    vm->reset();
    vm->step();
    vm->step();
    vm->step();
    assertEquals(vm->getC(),0, "No carry on equals");
    assertEquals(vm->getZ(),1, "Z set on equals");
    assertEquals(vm->getO(),0, "No signed-carry on equals");

    loader->reset();
    loader->loadALU(0, 0, 8, 1);
    loader->loadALU(0, 0, 9, 0);
    loader->loadALU(14, 8, 9);
    vm->reset();
    vm->step();
    vm->step();
    vm->step();
    assertEquals(vm->getC(),0, "No carry on >");
    assertEquals(vm->getZ(),0, "Z not set on >");
    assertEquals(vm->getO(),0, "No signed-carry on >");


    loader->reset();
    loader->loadALU(0, 0, 8, 0);
    loader->loadALU(0, 0, 9, 1);
    loader->loadALU(14, 8, 9);
    vm->reset();
    vm->step();
    vm->step();
    vm->step();
    assertEquals(vm->getC(),1, "Carry on <");
    assertEquals(vm->getZ(),0, "Z not set on <");
    assertEquals(vm->getO(),1, "Signed-carry on <");


    loader->reset();
    loader->loadALU(0, 0, 8, 1);
    loader->loadALU(0, 0, 9, -1);
    loader->loadALU(14, 8, 9);
    vm->reset();
    vm->step();
    vm->step();
    vm->step();
    assertEquals(vm->getC(),1, "Carry on <");
    assertEquals(vm->getZ(),0, "Z not set on <");
    assertEquals(vm->getO(),0, "No signed-carry on <");
}

};
# 16 "/home/duncan/src/ForthCPUEmulator/main.cpp" 2
# 1 "/home/duncan/src/ForthCPUEmulator/tests/SlurpTests.h" 1





class SlurpTests : public Test {

    public:
    SlurpTests(TestSuite *suite, ForthVM *fvm, Assembler *vmasm, Loader *loader) : Test(suite, fvm, vmasm, loader) {}

    void run() {

        testSuite->reset();

        shouldOpenTestSlurp();

        shouldGetOpeningComment();
        shouldGetSecondComment();

        shouldGetHexConstant();
        shouldGetDecConstant();
        shouldGetBinConstant();
        shouldGetOrg1();
        shouldGetVariable();
        shouldGetString();

        shouldGetData1();
        shouldGetData2();
        shouldGetData3();

        shouldGetOrg2();
        shouldGetLabel();
        shouldGetMOV();
        shouldGetNOP();
        shouldGetLabel1();
        shouldGetJP();




        printf("==============================\n");
        printf("TOTAL: %d  PASSED %d  FAILED %d\n", testSuite->tests, testSuite->passed, testSuite->failed);
        printf("==============================\n");
    }


    void shouldOpenTestSlurp() {
        shouldOpenAsmFile("tests/test-slurp.fasm", 946);
    }


    void shouldGetOpeningComment() {
        printf("         shouldGetOpeningComment\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize a standalone comment");
        assertEquals(tok->type, 5, "Type should be COMMENT");
        assertEquals(tok->line, 1, "First comment is on line 1");
        assertEquals(tok->pos, 2, "First comment is on pos 2");
    }

    void shouldGetSecondComment() {
        printf("         shouldGetSecondComment\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize a standalone comment");
        assertEquals(tok->type, 5, "Type should be COMMENT");
        assertEquals(tok->line, 2, "Second comment is on line 2");
        assertEquals(tok->pos, 1, "Second comment is on pos 1");
    }

    void shouldGetHexConstant() {
        printf("         shouldGetHexConstant\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize a HEX constant");
        assertEquals(tok->type, 2, "Type should be CONST");
        assertEquals(tok->line, 5, "Constant is on line 5");
        assertEquals(tok->pos, 1, "Constant is on pos 1");
        assertEquals(strcmp(tok->name, "#HNAME"), 0, "Should parse CONST label");
        assertEquals(tok->value, 0xFA90, "Should parse a hex value");

        tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize an end of line comment");
        assertEquals(tok->type, 5, "Type should be COMMENT");
    }
    void shouldGetDecConstant() {
        printf("         shouldGetDecConstant\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize a DEC constant");
        assertEquals(tok->type, 2, "Type should be CONST");
        assertEquals(tok->line, 6, "Constant is on line 6");
        assertEquals(tok->pos, 1, "Constant is on pos 1");
        assertEquals(strcmp(tok->name, "#DNAME"), 0, "Should parse CONST label");
        assertEquals(tok->value, 3900, "Should parse a decimal value");

        tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize an end of line comment");
        assertEquals(tok->type, 5, "Type should be COMMENT");
    }
    void shouldGetBinConstant() {
        printf("         shouldGetBinConstant\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize a BIN constant");
        assertEquals(tok->type, 2, "Type should be CONST");
        assertEquals(tok->line, 7, "Constant is on line 7");
        assertEquals(tok->pos, 1, "Constant is on pos 1");
        assertEquals(strcmp(tok->name, "#BNAME"), 0, "Should parse CONST label");
        assertEquals(tok->value, 0b10010110, "Should parse a binary value");

        tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize an end of line comment");
        assertEquals(tok->type, 5, "Type should be COMMENT");
    }

    void shouldGetVariable() {
        printf("         shouldGetVariable\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize a variable");
        assertEquals(tok->type, 3, "Type should be VAR");
        assertEquals(tok->line, 10, "Var is on line 10");
        assertEquals(tok->pos, 1, "Var is on pos 1");
        assertString(tok->name, "%VNAME", "Should parse VAR label");

        tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize an end of line comment");
        assertEquals(tok->type, 5, "Type should be COMMENT");
    }

    void shouldGetString() {
        printf("         shouldGetString\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize a string label");
        assertEquals(tok->type, 4, "Type should be STRING");
        assertEquals(tok->line, 11, "String is on line 11");
        assertEquals(tok->pos, 1, "String is on pos 1");
        assertString(tok->name, "$SNAME", "Should parse String label");
        assertString(tok->str, "This is a string", "Should have the correct string value");

        tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize an end of line comment");
        assertEquals(tok->type, 5, "Type should be COMMENT");
    }


    void shouldGetOrg1() {
        printf("         shouldGetOrg1\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize a line label");
        assertEquals(tok->type, 8, "Type should be DIRECTIVE");
        assertEquals(tok->line, 9, "ORG is on line 9");
        assertEquals(tok->pos, 1, "ORG is on pos 1");
        assertEquals(tok->value, 1000, "Should parse value");

        tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize an end of line comment");
        assertEquals(tok->type, 5, "Type should be COMMENT");
    }

    void shouldGetOrg2() {
        printf("         shouldGetOrg2\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize a line label");
        assertEquals(tok->type, 8, "Type should be DIRECTIVE");
        assertEquals(tok->line, 17, "ORG is on line 17");
        assertEquals(tok->pos, 1, "ORG is on pos 1");
        assertEquals(tok->value, 0, "Should parse value");

        tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize an end of line comment");
        assertEquals(tok->type, 5, "Type should be COMMENT");
    }

    void shouldGetData1() {
        printf("         shouldGetData1\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize a directive");
        assertEquals(tok->type, 8, "Type should be DIRECTIVE");
        assertEquals(tok->line, 13, "DATA is on line 13");
        assertEquals(tok->pos, 1, "DATA is on pos 1");
        assertEquals(tok->value, 0xfa71, "Should parse value");

        tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize an end of line comment");
        assertEquals(tok->type, 5, "Type should be COMMENT");
    }
    void shouldGetData2() {
        printf("         shouldGetData2\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize a directive");
        assertEquals(tok->type, 8, "Type should be DIRECTIVE");
        assertEquals(tok->line, 14, "SDATA is on line 14");
        assertEquals(tok->pos, 1, "SDATA is on pos 1");
        assertString(tok->str, "Hello World!", "Should parse value");

        tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize an end of line comment");
        assertEquals(tok->type, 5, "Type should be COMMENT");
    }
    void shouldGetData3() {
        printf("         shouldGetData3\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize a directive");
        assertEquals(tok->type, 8, "Type should be DIRECTIVE");
        assertEquals(tok->line, 15, "DATA is on line 15");
        assertEquals(tok->pos, 1, "DATA is on pos 1");
        assertEquals(tok->value, 0, "Should defer value");
    }

    void shouldGetLabel() {
        printf("         shouldGetLabel\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize a line label");
        assertEquals(tok->type, 1, "Type should be LABEL");
        assertEquals(tok->line, 18, "Label is on line 18");
        assertEquals(tok->pos, 1, "label is on pos 1");
        assertString(tok->name, "START", "Should parse label");
    }

    void shouldGetMOV() {
        printf("         shouldGetMOV\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize an opcode");
        assertEquals(tok->type, 0, "Type should be OPCODE");
        assertEquals(tok->opcode->getALUOp(), 0, "Should be a MOV instruction");

        tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize an end of line comment");
        assertEquals(tok->type, 5, "Type should be COMMENT");
    }

    void shouldGetNOP() {
        printf("         shouldGetNOP\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize an opcode");
        assertEquals(tok->type, 0, "Type should be OPCODE");
        assertEquals(tok->opcode->getALUOp(), 0, "Should be a NOP instruction");
    }

    void shouldGetLabel1() {
        printf("         shouldGetLabel1\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize a line label");
        assertEquals(tok->type, 1, "Type should be LABEL");
        assertEquals(tok->line, 20, "Label is on line 20");
        assertEquals(tok->pos, 1, "label is on pos 1");
        assertString(tok->name, "LABEL1", "Should parse label");
    }

    void shouldGetJP() {
        printf("         shouldGetJP\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize an opcode");
        assertEquals(tok->type, 0, "Type should be OPCODE");
        assertEquals(tok->opcode->getJMPOp(), 0, "Should be a JP instruction");

        tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize an end of line comment");
        assertEquals(tok->type, 5, "Type should be COMMENT");
    }
    void shouldGetMOVI() {
        printf("         shouldGetMOVI\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize an opcode");
        assertEquals(tok->type, 0, "Type should be OPCODE");
        assertEquals(tok->opcode->getALUOp(), 0, "Should be a MOV instruction");
    }

};
# 17 "/home/duncan/src/ForthCPUEmulator/main.cpp" 2
# 1 "/home/duncan/src/ForthCPUEmulator/tests/RangeTests.h" 1





class RangeTests : public Test
{

public:

    RangeTests(TestSuite *suite, ForthVM *fvm, Assembler *vmasm, Loader *loader) : Test(suite, fvm, vmasm, loader) {}

    void run()
    {
        shouldOpenTestRange();
        shouldGetOpeningComment();
        skipTokens(3);
        shouldGetMOVI();
    }

    void shouldOpenTestRange()
    {
        shouldOpenAsmFile("tests/test-range.fasm", 70);
    }
    void shouldGetOpeningComment()
    {
        printf("         shouldGetOpeningComment\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize a standalone comment");
        assertEquals(tok->type, 5, "Type should be COMMENT");
        assertEquals(tok->line, 1, "First comment is on line 1");
        assertEquals(tok->pos, 2, "First comment is on pos 2");
    }
    void shouldGetMOVI()
    {
        printf("         shouldGetMOVI\n");
        Token *tok = fasm->getToken();
        assert(tok->type != 6, "Should tokenize an opcode");
        assertEquals(tok->type, 0, "Type should be OPCODE");
        assertEquals(tok->opcode->getALUOp(), 0, "Should be a MOVI instruction");
    }
};
# 18 "/home/duncan/src/ForthCPUEmulator/main.cpp" 2
# 1 "/home/duncan/src/ForthCPUEmulator/tests/LabelTests.h" 1





class LabelTests : public Test {
    public:
    LabelTests(TestSuite *suite, ForthVM *fvm, Assembler *vmasm, Loader *loader) : Test(suite, fvm, vmasm, loader) {}
    void run() {
        shouldOpenTestLabels();
        skipTokens(1);
        shouldGetALabel("TOKEN");
        skipTokens(3);
        shouldGetALabel("TOKEN_WA");
        skipTokens(1);
        shouldGetALabel("TOKEN_CA");
        skipTokens(10);
        shouldGetAnOpcode("PUSHR", 0x53);
    }

    void shouldOpenTestLabels() {
        shouldOpenAsmFile("tests/test-labels.fasm", 70);
    }

};
# 19 "/home/duncan/src/ForthCPUEmulator/main.cpp" 2
# 30 "/home/duncan/src/ForthCPUEmulator/main.cpp"
uint8_t ram[16384];

uint8_t rom[32];

UnsafeMemory mem(ram, 16384, 0, rom, 64, 16384);


ForthVM vm(&mem);
Loader loader(&mem);

Assembler fasm;
Dumper dumper;
Debugger debugger;

TestSuite *testSuite = new TestSuite();
VMTests vmTests(testSuite, &vm, &fasm, &loader);
RangeTests rangeTests(testSuite, &vm, &fasm, &loader);
LabelTests labelTests(testSuite, &vm, &fasm, &loader);
SlurpTests slurpTests(testSuite, &vm, &fasm, &loader);

int tests = 0;
int passed = 0;
int failed = 0;

bool runInstructionTests;
bool runAssemblerTests;
bool verbose;



int mode = 0;
bool loaded = false;

char getCommand() {
  int c = getchar();
  return (char)c;
}

void modeAtmega328() {
  fasm.clearOptions();
  fasm.setOption("#RAMSTART", 0x2400);
  fasm.setOption("#VARSTART", 0x2600);
  fasm.setOption("#SPTOP", 0x2780);
  fasm.setOption("#RSTOP", 0x27fe);
  fasm.setOption("#LBUF_LEN", 80);
  mode = 0;
  loaded = false;
}

void modeSTM32() {
  fasm.clearOptions();
  fasm.setOption("#RAMSTART", 0x2000);
  fasm.setOption("#VARSTART", 0x3000);
  fasm.setOption("#SPTOP", 0x3f80);
  fasm.setOption("#RSTOP", 0x3ffe);
  fasm.setOption("#LBUF_LEN", 80);
  mode = 1;
  loaded = false;
}

void setMode() {
  if(mode == 0)
  {
    modeAtmega328();
  } else {
    modeSTM32();
  }
}

bool loadInnerInterpreter()
{

  setMode();
  fasm.slurp("fasm/core.fasm");
  fasm.pass1();
  fasm.pass2();
  fasm.pass3();

  if(!fasm.hasErrors())
  {



    fasm.writeMemory(&mem);
    Symbol *sym = fasm.getSymbol("DICTIONARY_END");
    vm.ram()->put(10, sym->token->address);
    loaded = true;
  }

  return !fasm.hasErrors();
}

void generateCPP() {
  if(loaded)
  {
    uint16_t romsize = vm.read(10);

    Symbol *sym = fasm.getSymbol("#RAMSTART");
    vm.ram()->put(10, sym->token->value);

    switch(mode) {
      case 0:
        dumper.writeCPP("ForthImage_ATMEGA328.h", &fasm, &mem, 0, romsize, true);
        break;

      case 1:
        dumper.writeCPP("ForthImage_STM32.h", &fasm, &mem, 0, romsize, true);
        break;

      default: break;
    }

    sym = fasm.getSymbol("DICTIONARY_END");
    vm.ram()->put(10, sym->token->address);

  }
  else
  {
    Serial.println("Image not loaded. Did you change the target?");
  }
}

void prompt() {
  if(mode == 0)
  {
    Serial.print("ATMEGA >>");
  }
  else
  {
    Serial.print("STM32 >>");
  }
}

bool commandLine() {
  char c;
  while((char)(c = getCommand()) == '\n') {
    prompt();
  }
  switch(c) {
    case 'A': modeAtmega328(); break;
    case 'G': generateCPP(); break;
    case 'S': modeSTM32(); break;
    case 'c': vm.reset(); vm.run(); prompt(); break;
    case 'w': vm.warm(); vm.run(); prompt(); break;
    case 'l': loadInnerInterpreter(); break;
    case 'e': return false;
    case 'd': vm.warm(); debugger.run(); prompt(); break;
    case '?':
      Serial.println("Commands:");
      Serial.println("A - Set mode ATMEGA328");
      Serial.println("S - Set mode STM32");
      Serial.println("G - Generate ForthImage_xxx.h");
      Serial.println("l - (Re)Load the minimal image");
      Serial.println("c - Cold start the Forth VM");
      Serial.println("w - Warm start the Forth VM");
      Serial.println("d - Run the debugger");
      Serial.println("e - Exit");
      break;
    default: break;
  }
  return true;
}

int main(int argc, char **argv)
{

  vmTests.run();
  rangeTests.run();
  labelTests.run();
  slurpTests.run();

  if (loadInnerInterpreter())
  {

    debugger.setAssembler(&fasm);
    debugger.setVM(&vm);
    debugger.reset();
    debugger.setBreakpoint1(0x1110);
    debugger.setLabelBreakpoint1("DOES_CODE");
    debugger.setLabelBreakpoint2("DOES_CODE");

    debugger.setShowForthWordsOnly();
    debugger.setVerbose(true);



    prompt();
    while(commandLine()) ;
  }
  else
  {
    printf("Assembly errors - exiting\n");
    printf("Phase 1 - %s\n", fasm.phase1Error ? "FAILED" : "OK");
    printf("Phase 2 - %s\n", fasm.phase2Error ? "FAILED" : "OK");
    printf("Phase 3 - %s\n", fasm.phase3Error ? "FAILED" : "OK");
  }

  return 0;
}
