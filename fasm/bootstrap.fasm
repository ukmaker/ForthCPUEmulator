; The core of the system is written in assembler for speed
; You can link devices from Arduino-land by writing a word
; which uses a SYSCALL instruction to call a function you
; supply in C to wrap the Ardino library
;
; Memory Map
; You should redefine this for your device depending on how
; much memory you have available.
; E.g. for an Atmega 328P (32KROM, 2K RAM) With no other code the Arduino environment
; needs approx 900 bytes RAM - so we take only 1K for Forth
;   #RAMSTART: 0x2000  ; Need to allocate 8K for Forth ROM
;   #VARSTART: 0x2200  ; Allow 256 bytes for new Forth words in RAM. Allot 64 bytes for variables. 128 for LBUF (see below)
;   #SPTOP:    0x23e0  ; Vars end at 0x2500 - 16 bytes for the data stack
;   #RSTOP:    0x23fe  ; 16 bytes for the return stack 
;
; values below are for STM32F401
;
#SYSTEM:   0x0000 ; System reset vector
#RAMSTART: 0x2000 ; Dictionary grows from here
#VARSTART: 0x3000 ; Variables grow up from here
#SPTOP:    0x3800 ; Data stack pointer grows down from here
#RSTOP:    0x3ffe ; And the return stack from here
                  ; This gives both stacks 2K bytes
#LBUF_LEN: 80     ; Maximum length of the line buffer in chars
#BASE_DEC: 10
#BASE_HEX: 16
#BASE_BIN: 2

#UART_STATUS_REG:                   0xffe0
#UART_DATA_REG:                     0xffe2
#UART_RX_DIV_REG:                   0xffe4
#UART_TX_DIV_REG:                   0xffe6
#UART_STATUS_BIT_RX_DATA_AVAILABLE: 0x0001
#UART_STATUS_BIT_TX_ACTIVE:         0x0002
#UART_STATUS_BIT_TX_DONE:           0x0004
#UART_STATUS_BIT_TX_INT:            0x0008
#UART_STATUS_BIT_RX_INT:            0x0010


; The predefined SYSCALLs
#SYSCALL_DEBUG: 0
#SYSCALL_TYPE: 1
#SYSCALL_TYPELN: 2
#SYSCALL_DOT: 3
#SYSCALL_GETC: 4
#SYSCALL_PUTC: 5
#SYSCALL_INLINE: 6
#SYSCALL_FLUSH: 7
#SYSCALL_NUMBER: 8
#SYSCALL_H_AT: 9
#SYSCALL_H_STORE: 10
#SYSCALL_D_ADD: 11
#SYSCALL_D_SUB: 12
#SYSCALL_D_MUL: 13
#SYSCALL_D_DIV: 14
#SYSCALL_D_SR: 15
#SYSCALL_D_SL: 16
#SYSCALL_D_AND: 17
#SYSCALL_D_OR: 18
#SYSCALL_D_INVERT: 19
#SYSCALL_DOT_C: 20
#SYSCALL_COMPARE: 21
#SYSCALL_FREE_MEMORY: 22
#SYSCALL_SYSCALL: 23
#SYSCALL_ARDUINO: 24
#SYSCALL_QEXIT: 25
; There was a good reason for leaving a gap. If only I could remember what it was....
#SYSCALL_FOPEN: 32
#SYSCALL_FCLOSE: 33
#SYSCALL_FREAD: 34

#MODE_EXECUTE: 0
#MODE_COMPILE: 1
#STATE_NOT_FOUND: 0
#STATE_FOUND: 1

#HEADER_MASK: 0x00ff
#HEADER_HEADER_BIT: 15
#HEADER_SCOPE_BITS: 12
#HEADER_PASSIVE:     0x8000 ; 0b1000 0000 0000 0000 - Normal word    execute/compile
#HEADER_IMMEDIATE:   0x9000 ; 0b1001 0000 0000 0000 - Immediate word error/execute
#HEADER_RUNTIME:     0xa000 ; 0b1010 0000 0000 0000 - Runtime word   execute/error (e.g. ':')
#HEADER_EXECUTIVE:   0xb000 ; 0b1011 0000 0000 0000 - Executive word execute/execute (e.g '(' ))
#HEADER_COMPILETIME: 0xc000 ; 0b1100 0000 0000 0000 - Compiled word  error/compile
#HEADER_HAS_LOCALS:  0x0800 ; 0b1000 1000 0000 0000 - This word allocates local variables

.ORG #VARSTART
%BASE: 2               ; Current system numeric base
%LBUF_IDX: 2           ; Current line buffer byte pointer
%LBUF_END: 2           ; Address of the last character in the buffer
%LBUF_DATA: #LBUF_LEN  ; Line buffer data
%DICTIONARY_POINTER: 2
%CONTEXT: 2
%CURRENT: 2
%CORE: 2
%MODE: 2
%STATE: 2
%FENCE: 2
%TOKEN_HANDLER: 2      ; User-installable vector for a word to handle unknown tokens
%TCHAR: 2              ; For testing - current char being converted to int

%USER_TOP: 2
USER_VARS:
.DATA 0


.ORG #SYSTEM ; Start vector is at address 0
START:
    JPI TDC

INT0:
    JPI INT0_HANDLER
INT1:
    JPI INT1_HANDLER

SYSCALLS:

SYSCALL_UART_TX_BYTE:
    ; ( RA=byte )
    .ALIAS R1,UART_STATUS_REG
    .ALIAS R2,UART_DATA_REG
    .ALIAS R0,CHAR

    MOV CHAR,RA
    LDI UART_STATUS_REG,#UART_STATUS_REG
    LDI UART_DATA_REG,#UART_DATA_REG

_SYSCALL_UART_TX_BYTE_WAIT_READY:
    LD RA,UART_STATUS_REG
    ANDAI #UART_STATUS_BIT_TX_DONE
    JRI[Z] _SYSCALL_UART_TX_BYTE_WAIT_READY

    ST CHAR,UART_DATA_REG
    JP RL

SYSCALL_UART_RX_BYTE:
    ;  Return byte in RA
    .ALIAS R1,UART_STATUS_REG
    .ALIAS R2,UART_DATA_REG
    LDI UART_STATUS_REG,#UART_STATUS_REG
    LDI UART_DATA_REG,#UART_DATA_REG

_SYSCALL_UART_RX_BYTE_WAIT_READY:
    LD RA,UART_STATUS_REG
    ANDAI #UART_STATUS_BIT_RX_DATA_AVAILABLE
    JRI[Z] _SYSCALL_UART_RX_BYTE_WAIT_READY
    LD RA,UART_DATA_REG
    JP RL

SYSCALL_UART_READLINE:
    ; ( bufaddr buflen -- status )
    ; status = 0 : no data was available
    ; status = 1 : data available
    ; status = 2 : empty input
    ; status = 3 : Ctl-C received during input
    .ALIAS R0,UART_STATUS_REG
    .ALIAS R1,UART_DATA_REG
    .ALIAS R2,BUFPTR
    .ALIAS R3,BUFLEN
    .ALIAS R4,BUFEND
    .ALIAS R5,RECEIVED
    .ALIAS R6,STATUS
    .ALIAS R7,BUFIDX

    POP BUFLEN,SP           ; Length of the buffer
    POP BUFPTR,SP
    MOV BUFIDX,BUFPTR
    MOV BUFEND,BUFPTR
    ADDI BUFEND,2            ; Points to the location containing the address of the end of the buffer
    ADDI BUFPTR,4          ; Where the actual characters are in the buffer
    ST  BUFPTR,BUFIDX
    MOVI RECEIVED,0

    LDI UART_STATUS_REG,#UART_STATUS_REG
    LDI UART_DATA_REG,#UART_DATA_REG  

    LD RA,UART_STATUS_REG
    ANDAI #UART_STATUS_BIT_RX_DATA_AVAILABLE
    JRI[Z] _SYSCALL_UART_READLINE_NONE

_SYSCALL_UART_READLINE_LOOP:
    LD RA,UART_DATA_REG
    CMPAI 0x03 ; Ctl-C?
    JRI[Z] _SYSCALL_UART_READLINE_CTLC 

    CMPAI 0x0a ; CR?
    JRI[Z] _SYSCALL_UART_READLINE_READ 

    PUSHR_B RA,BUFPTR
    ADDI RECEIVED,1
    SUBI BUFLEN,1
    JRI[Z] _SYSCALL_UART_READLINE_DONE

_SYSCALL_UART_READLINE_WAIT:
    LD RA,UART_STATUS_REG
    ANDAI #UART_STATUS_BIT_RX_DATA_AVAILABLE
    JRI[Z] _SYSCALL_UART_READLINE_WAIT
    JRI _SYSCALL_UART_READLINE_LOOP

_SYSCALL_UART_READLINE_READ:
    ; Did we actually read something?
    CMPI RECEIVED,0
    JRI[Z] _SYSCALL_UART_READLINE_NONE
    ; Store the end of the received data to BUFPTR
    ST BUFPTR,BUFEND
    MOVI STATUS,1
    JRI _SYSCALL_UART_READLINE_DONE

_SYSCALL_UART_READLINE_NONE:
    MOVI STATUS,0
    JRI _SYSCALL_UART_READLINE_DONE

_SYSCALL_UART_READLINE_CTLC:
    MOVI STATUS,0x03

_SYSCALL_UART_READLINE_DONE:
    PUSH STATUS,SP
    JP RL

SYSCALL_TYPE:
    ; ( addr -- )
    ; Print a FORTH String
    ; Got here from a JL, so preserve RL
    ; TOS SP is the address of the string
    ; First word of the string is the length
    ; Use R0 as the address, R1 as the length, R2 as the char to write
    ; Save to RS to start
    .ALIAS R0,ADDR
    .ALIAS R1,LEN
    .ALIAS RA,CHAR

    PUSH RL,RS

    POP ADDR,SP
    LD LEN,ADDR
    ADDI ADDR,2 ; Point to first char
_SYSCALL_TYPE_LOOP:
    POP_B CHAR,ADDR ; LD_B RA,(R0++)
    PUSH ADDR,RS
    PUSH LEN,RS

    JRIL SYSCALL_UART_TX_BYTE

    POP LEN,RS
    POP ADDR,RS
    SUBI LEN,1
    JRI[NZ] _SYSCALL_TYPE_LOOP

    POP RL,RS
    JP RL

SYSCALL_TYPELN:
    PUSH RL,RS
    JRIL SYSCALL_TYPE
    JRIL SYSCALL_CRET
    POP RL,RS
    JP RL

SYSCALL_CRET:

    PUSH RL,RS

    MOVI RA,0x0d ; CR
    JRIL SYSCALL_UART_TX_BYTE
    
    MOVI RA,0x0a ; LF
    JRIL SYSCALL_UART_TX_BYTE

    POP RL,RS
    JP RL

SYSCALL_DOT:
    ; (val base signed -- )
    .ALIAS R0,VAL
    .ALIAS R1,BASE
    .ALIAS R2,SIGNED
    .ALIAS R3,DIGIT
    .ALIAS R4,IDX
    .ALIAS R5,MASK

    ; Save registers
    PUSH RL,RS

    POP SIGNED,SP
    POP BASE,SP
    POP VAL,SP

    MOV RA,BASE

    CMPAI 2     ; Base 2?
    JRI[Z] _SYSCALL_DOT_BINARY

    CMPAI 0x10  ; Base 16?
    JRI[Z] _SYSCALL_DOT_HEX

    CMPI SIGNED,0 ; Signed?
    JRI[NZ] _SYSCALL_DOT_SIGNED

    ; Print in unsigned decimal
    JRI _SYSCALL_DOT_UNSIGNED

_SYSCALL_DOT_SIGNED:
    ; is the value negative?
    BITI VAL,15
    JRI[Z] _SYSCALL_DOT_UNSIGNED
    ; Yes, so emit a minus sign and make it positive
    PUSH VAL,RS
    LDI RA,'-'
    JRIL SYSCALL_UART_TX_BYTE
    POP DIGIT,RS
    MOVI VAL,0
    SUB VAL,DIGIT ; Make positive

_SYSCALL_DOT_UNSIGNED:
    ; keep dividing by ten and pushing the remainder to the stack until there is nothing left
    ; {R1,R0} contains the input
    ; R2 contains 10
    ; Result is in R0, R1 is remainder
    MOVI DIGIT,0 ; Keep track of the number of digits
_SYSCALL_DOT_UNSIGNED_LOOP:
    MOVI R1,0
    MOVI R2,10

    PUSH DIGIT,RS
    JRIL UD_DIV
    POP DIGIT,RS

    ADDI DIGIT,1
    MOV RA,R1
    ADDAI '0'
    PUSH RA,SP
    CMPI R0,0
    JRI[NZ] _SYSCALL_DOT_UNSIGNED_LOOP
    ; Now print out the digits
_SYSCALL_DOT_UNSIGNED_PRINT_LOOP:
    PUSH DIGIT,RS
    POP RA,SP
    JRIL SYSCALL_UART_TX_BYTE
    POP DIGIT,RS
    SUBI DIGIT,1
    JRI[NZ] _SYSCALL_DOT_UNSIGNED_PRINT_LOOP

    JRI _SYSCALL_DOT_RETURN

; Print in binary
_SYSCALL_DOT_BINARY:
    LDI IDX,0x10
_SYSCALL_DOT_BINARY_LOOP:
    SLI VAL,1
    JRI[C] _SYSCALL_DOT_BINARY_ONE
    PUSH VAL,RS
    PUSH IDX,RS
    MOVAI '0'
    JRI _SYSCALL_DOT_BINARY_TX
_SYSCALL_DOT_BINARY_ONE:
    MOVAI '1'
_SYSCALL_DOT_BINARY_TX:
    JRIL SYSCALL_UART_TX_BYTE
    POP IDX,RS
    POP VAL,RS
    SUBI IDX,1
    JRI[NZ] _SYSCALL_DOT_BINARY_LOOP
    JRI _SYSCALL_DOT_RETURN

_SYSCALL_DOT_HEX:
    LDI IDX,4
_SYSCALL_DOT_HEX_LOOP:
    LDI RA,0xf000
    AND RA,VAL
    SRI RA,12
    PUSH VAL,RS
    PUSH IDX,RS
    JRIL _SYSCALL_DOT_HEXDIGIT
    POP IDX,RS
    POP VAL,RS
    SLI  VAL,4
    SUBI IDX,1
    JRI[NZ] _SYSCALL_DOT_HEX_LOOP
    JRI _SYSCALL_DOT_RETURN

_SYSCALL_DOT_RETURN:
    ; Restore registers
    POP RL,RS
    JP RL

_SYSCALL_DOT_HEXDIGIT:
    ; ( RA=digit )
    PUSH RL,RS
    CMPAI 0x0a
    JRI[NC] _SYSCALL_DOT_HEXDIGIT_GT9
    ; 0-9
    ADDAI '0'
    JRI _SYSCALL_DOT_HEXDIGIT_OUT
_SYSCALL_DOT_HEXDIGIT_GT9:
    SUBAI 0x0a
    ADDAI 'a'
_SYSCALL_DOT_HEXDIGIT_OUT:
    JRIL SYSCALL_UART_TX_BYTE
    POP RL,RS
    JP RL

UD_DIV: 
    ; Internal routine passes args and results in registers
    ; Unsigned double division
    ;   - {R1,R0} are 24-bit dividend
    ;   - R2 is 8-bit quotient
    ; Returns
    ;   - R0 contains 16-bit quotient
    ;   - R1 contains 8-bit remainder
    ; Destroys
    ;   - RA
    ;
    ;
    MOVAI 0x10 ; 16-bits to work on
_UD_DIV_LOOP:
    ADD R1,R1
    ADD R0,R0
    JRI[NC] _UD_DIV_LOOP_1
    ; Increment the MSB
    ADDI R1,1
_UD_DIV_LOOP_1:
    SUB R1,R2
    JRI[M] _UD_DIV_SKIP ; 
    ADDI R0,1 ; Set low bit
    JRI _UD_DIV_CONT
_UD_DIV_SKIP:
    ADD R1,R2
_UD_DIV_CONT:
    SUBI RA,1
    JRI[NZ] _UD_DIV_LOOP
_UD_DIV_DONE:
    JP RL

INLINE:
    PUSH RL,RS
    LDI R0,%LBUF_IDX
    LDI R1,#LBUF_LEN
    PUSH R0,SP
    PUSH R1,SP
    JRIL SYSCALL_UART_READLINE
    POP RL,RS
    JP RL

C_TO_I:
    ; Attempt to convert the hex char in RA to a valid number
    ; Return the number in RA, or -1 if no converted
    CMPAI '0'
    JRI[C] C_TO_I_INVALID
    SUBAI '0'
    CMPAI 10
    JRI[NC] C_TO_I_GT_9
    JP RL ; return the value
C_TO_I_GT_9:
    SUBAI 7 ; Put A at 10
    CMPAI 10
    JRI[C] C_TO_I_INVALID ; less than 'A'
    CMPAI 16
    JRI[NC] C_TO_I_LOWER_CASE ; greater than 'F'
    JP RL ; return value
C_TO_I_LOWER_CASE:
    SUBAI 32
    CMPAI 10
    JRI[C] C_TO_I_INVALID
    CMPAI 16
    JRI[NC] C_TO_I_INVALID
    JP RL
C_TO_I_INVALID:
    MOVAS -1
    JP RL
    

COLD:
    ; test the syscalls
    ; Set up the stacks
    LDI SP,#SPTOP
    LDI RS,#RSTOP


    LDI R0,MSG_HELLO
    PUSH R0,SP
    JPIL SYSCALL_TYPE
    LDI R0,MSG_HELLO
    PUSH R0,SP
    JPIL SYSCALL_TYPE

TDC:
    ; Set up the stacks
    LDI SP,#SPTOP
    LDI RS,#RSTOP
    ; Tests SYSCALL_DOT
    ; ( val base signed -- )
    ;MOVI R0,7
    ;MOVI R1,10
    ;MOVI R2,0
    ;PUSH R0,SP
    ;PUSH R1,SP
    ;PUSH R2,SP
    ;JRIL SYSCALL_DOT
    
    ; Test digit conversion
    MOVAI 57
    LDI RB,%TCHAR
    ST  RA,RB
TDC_LOOP:

    LD RA,RB
    MOVI R0,0
    MOVI R1,10
    PUSH RA,SP
    PUSH R1,SP
    PUSH R0,SP
    JRIL SYSCALL_DOT ; ( val base signed -- )
    MOVAI ' '
    JRIL SYSCALL_UART_TX_BYTE
    LD RA,RB
    JRIL C_TO_I
    MOVI R0,1
    MOVI R1,10
    PUSH RA,SP
    PUSH R1,SP
    PUSH R0,SP
   JRIL SYSCALL_DOT ; ( val base signed -- )

    MOVAI 0x0a ; CR
    JRIL SYSCALL_UART_TX_BYTE

    LD RA,RB
    SUBI RA,1
    ST RA,RB
    JRI[NZ] TDC_LOOP

    HALT

JRIL SYSCALL_UART_RX_BYTE
JRIL SYSCALL_UART_RX_BYTE
    
LOOP:
    JRIL INLINE
LOOP_BRK:
    POP R0,SP
    CMPI R0,0
    JRI[Z] LOOP
    ; Now print the buffer char by char

    LDI RA,%LBUF_IDX
    LD R0,RA
    LDI RA,%LBUF_END
    LD R1,RA
    MOV R2,R1
    SUB R2,R0 ; number of bytes in the buffer to R2
LOOP_PRINT_CHAR:
    POP_B RA,R0
    SUBI R2,1

    PUSH R0,SP
    PUSH R1,SP
    PUSH R2,SP
 
    JRIL SYSCALL_UART_TX_BYTE

    POP R2,SP
    POP R1,SP
    POP R0,SP

    CMPI R2,0
    JRI[NZ] LOOP_PRINT_CHAR

    HALT

    ; Get and print a char
    JRIL SYSCALL_UART_RX_BYTE
    JRIL SYSCALL_UART_RX_BYTE
    JRIL SYSCALL_UART_RX_BYTE
    JRIL SYSCALL_UART_TX_BYTE
    JRIL SYSCALL_UART_TX_BYTE

    HALT

    LDI R0,MSG_HELLO
    PUSH R0,SP
    JPIL SYSCALL_TYPE
    LDI R0,MSG_HELLO
    PUSH R0,SP
    JPIL SYSCALL_TYPE

    LDI R0,MSG_UNKNOWN_TOKEN
    PUSH R0,SP
    JPIL SYSCALL_TYPELN

    ; Try a division
    .ALIAS R0,DDL
    .ALIAS R1,DDH
    .ALIAS R2,QUOT
    .ALIAS R3,SIGNED
    .ALIAS R4,BASE
    
    LDI RA,999
    MOV DDL,RA
    MOVI DDH,0
    MOVI QUOT,6
    JPIL UD_DIV

    MOVAI 0x0a ; the base (hex)
    MOV BASE,RA
    MOVI SIGNED,0 ; no used but has to be passed
    ; Save regs for later
    .ALIAS R0,RESULT
    .ALIAS R1,REMAINDER
    PUSH REMAINDER,RS
    PUSH BASE,RS
    PUSH SIGNED,RS

    ; Output the result
    ; R0 - quot
    ; R1 - rem
    ; ( val base signed -- )
    ; print quot 
    ; println
    ; print rem
    ; println
PRINT_QUOT:
    PUSH RESULT,SP
    PUSH BASE,SP
    PUSH SIGNED,SP
    JRIL SYSCALL_DOT
    JRIL SYSCALL_CRET

PRINT_REM:
    POP SIGNED,RS
    POP BASE,RS
    POP REMAINDER,RS
    PUSH REMAINDER,SP
    PUSH BASE,SP
    PUSH SIGNED,SP
    JRIL SYSCALL_DOT
    JRIL SYSCALL_CRET

  HALT


INT0_HANDLER:
INT1_HANDLER:
  HALT


MESSAGES: ; SYSTEM MESSAGES LIVE HERE
MSG_HELLO:          .DATA 23 .SDATA "Hello! I'm a TIL :-) >>"
MSG_UNKNOWN_TOKEN:  .DATA 14 .SDATA "Unknown token "
MSG_IMMEDIATE_ONLY: .DATA 36 .SDATA "Immediate words forbidden at runtime"
MSG_COMPILE_ONLY:   .DATA 39 .SDATA "Compile-time words forbidden at runtime"
MSG_RUNTIME_ONLY:   .DATA 39 .SDATA "Runtime words forbidden at compile-time"
MSG_SYSTEM_ERROR:   .DATA 12 .SDATA "System error"
MSG_WORD_NOT_FOUND: .DATA 14 .SDATA "Word not found"
MSG_PROMPT:         .DATA  5 .SDATA "OK >>"
MSG_SP_UNDERFLOW:   .DATA 15 .SDATA "Stack underflow"
MSG_RS_UNDERFLOW:   .DATA 22 .SDATA "Return stack underflow"


DICTIONARY_END:

